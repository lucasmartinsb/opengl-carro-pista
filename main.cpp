// #include <GL/glew.h>
// #include <GLFW/glfw3.h>
#include <vector>
#include <glad/glad.h>
#include "opengl_utils.cpp"
#include "vendor/stb_image.h"
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <Shader.h>
#include <iostream>

float cubeVertices[] = {
     0.5f, -0.5f,  0.5f, 0.0f, 0.0f,
    -0.5f, -0.5f,  0.5f, 1.0f, 0.0f,
    -0.5f, -0.5f, -0.5f, 1.0f, 1.0f,
     0.5f,  0.5f, -0.5f, 1.0f, 1.0f,
    
    -0.5f, 0.5f, -0.5f, 0.0f, 1.0f,
    -0.5f, 0.5f,  0.5f, 0.0f, 0.0f,
     0.5f, 0.5f, -0.5f, 1.0f, 1.0f,
     0.5f, 0.5f,  0.5f, 0.0f, 1.0f,
    
     0.5f, -0.5f, 0.5f, 0.0f, 0.0f,
     0.5f, -0.5f, 0.5f, 1.0f, 0.0f,
     0.5f,  0.5f, 0.5f, 1.0f, 1.0f,
    -0.5f,  0.5f, 0.5f, 0.0f, 1.0f,
    
    -0.5f,  0.5f,  0.5f, 1.0f, 1.0f,
    -0.5f,  0.5f, -0.5f, 0.0f, 1.0f,
    -0.5f, -0.5f, -0.5f, 0.0f, 0.0f,
     0.5f,  0.5f, -0.5f, 0.0f, 1.0f,
    
     0.5f, -0.5f, -0.5f, 0.0f, 0.0f,
    -0.5f, -0.5f, -0.5f, 1.0f, 0.0f,
     0.5f, -0.5f, -0.5f, 0.0f, 1.0f,
     0.5f, -0.5f,  0.5f, 0.0f, 0.0f,
    
    -0.5f, -0.5f, -0.5f, 1.0f, 1.0f,
     0.5f,  0.5f,  0.5f, 1.0f, 0.0f,
     0.5f,  0.5f, -0.5f, 1.0f, 1.0f,
    -0.5f,  0.5f,  0.5f, 0.0f, 0.0f,
    
     0.5f, -0.5f, -0.5f, 1.0f, 0.0f,
     0.5f,  0.5f, -0.5f, 1.0f, 1.0f,
     0.5f, -0.5f,  0.5f, 0.0f, 0.0f,
    -0.5f, -0.5f,  0.5f, 0.0f, 0.0f,
    
     0.5f, -0.5f, 0.5f, 1.0f, 0.0f,
    -0.5f,  0.5f, 0.5f, 0.0f, 1.0f,
    -0.5f, -0.5f, 0.5f, 1.0f, 0.0f,
    -0.5f,  0.5f, 0.5f, 1.0f, 1.0f,

    -0.5f, -0.5f, -0.5f, 0.0f, 0.0f,
    -0.5f,  0.5f, -0.5f, 1.0f, 1.0f,
     0.5f,  0.5f, -0.5f, 0.0f, 1.0f,
    -0.5f, -0.5f, -0.5f, 1.0f, 0.0f
};

float carroVertices[] = {
    1.30f, 1.00f, 2.00f, 0.88f, 0.50f,
    2.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    2.30f, 1.00f, 2.00f, 0.63f, 0.50f,
    2.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    1.30f, 0.00f, 3.00f, 0.38f, 1.00f,
    2.30f, 0.00f, 3.00f, 0.38f, 0.75f,
    1.30f, 1.00f, 3.00f, 0.63f, 0.00f,
    1.30f, 0.00f, 2.00f, 0.38f, 0.25f,
    1.30f, 0.00f, 3.00f, 0.38f, 0.00f,
    2.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    1.30f, 0.00f, 3.00f, 0.13f, 0.75f,
    1.30f, 0.00f, 2.00f, 0.13f, 0.50f,
    2.30f, 1.00f, 2.00f, 0.63f, 0.50f,
    2.30f, 0.00f, 3.00f, 0.38f, 0.75f,
    2.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    1.30f, 1.00f, 2.00f, 0.63f, 0.25f,
    2.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    1.30f, 0.00f, 2.00f, 0.38f, 0.25f,
    1.30f, 1.00f, 2.00f, 0.88f, 0.50f,
    1.30f, 1.00f, 3.00f, 0.88f, 0.75f,
    2.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    2.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    1.30f, 1.00f, 3.00f, 0.63f, 1.00f,
    1.30f, 0.00f, 3.00f, 0.38f, 1.00f,
    1.30f, 1.00f, 3.00f, 0.63f, 0.00f,
    1.30f, 1.00f, 2.00f, 0.63f, 0.25f,
    1.30f, 0.00f, 2.00f, 0.38f, 0.25f,
    2.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    2.30f, 0.00f, 3.00f, 0.38f, 0.75f,
    1.30f, 0.00f, 3.00f, 0.13f, 0.75f,
    2.30f, 1.00f, 2.00f, 0.63f, 0.50f,
    2.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    2.30f, 0.00f, 3.00f, 0.38f, 0.75f,
    1.30f, 1.00f, 2.00f, 0.63f, 0.25f,
    2.30f, 1.00f, 2.00f, 0.63f, 0.50f,
    2.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    -2.25f, 4.45f, -3.72f, 0.88f, 0.50f,
    2.25f, 4.45f, 2.28f, 0.63f, 0.75f,
    2.25f, 4.45f, -3.72f, 0.63f, 0.50f,
    2.25f, 4.45f, 2.28f, 0.63f, 0.75f,
    -2.25f, 3.05f, 2.28f, 0.38f, 1.00f,
    2.25f, 3.05f, 2.28f, 0.38f, 0.75f,
    -2.25f, 4.45f, 2.28f, 0.63f, 0.00f,
    -2.25f, 3.00f, -3.72f, 0.38f, 0.25f,
    -2.25f, 3.05f, 2.28f, 0.38f, 0.00f,
    2.25f, 3.00f, -3.72f, 0.38f, 0.50f,
    -2.25f, 3.05f, 2.28f, 0.13f, 0.75f,
    -2.25f, 3.00f, -3.72f, 0.13f, 0.50f,
    2.25f, 4.45f, -3.72f, 0.63f, 0.50f,
    2.25f, 3.05f, 2.28f, 0.38f, 0.75f,
    2.25f, 3.00f, -3.72f, 0.38f, 0.50f,
    -2.25f, 4.45f, -3.72f, 0.63f, 0.25f,
    2.25f, 3.00f, -3.72f, 0.38f, 0.50f,
    -2.25f, 3.00f, -3.72f, 0.38f, 0.25f,
    -2.25f, 4.45f, -3.72f, 0.88f, 0.50f,
    -2.25f, 4.45f, 2.28f, 0.88f, 0.75f,
    2.25f, 4.45f, 2.28f, 0.63f, 0.75f,
    2.25f, 4.45f, 2.28f, 0.63f, 0.75f,
    -2.25f, 4.45f, 2.28f, 0.63f, 1.00f,
    -2.25f, 3.05f, 2.28f, 0.38f, 1.00f,
    -2.25f, 4.45f, 2.28f, 0.63f, 0.00f,
    -2.25f, 4.45f, -3.72f, 0.63f, 0.25f,
    -2.25f, 3.05f, -3.72f, 0.38f, 0.25f,
    2.25f, 3.05f, -3.72f, 0.38f, 0.50f,
    2.25f, 3.05f, 2.28f, 0.38f, 0.75f,
    -2.25f, 3.05f, 2.28f, 0.13f, 0.75f,
    2.25f, 4.45f, -3.72f, 0.63f, 0.50f,
    2.25f, 4.45f, 2.28f, 0.63f, 0.75f,
    2.25f, 3.05f, 2.28f, 0.38f, 0.75f,
    -2.25f, 4.45f, -3.72f, 0.63f, 0.25f,
    2.25f, 4.45f, -3.72f, 0.63f, 0.50f,
    2.25f, 3.00f, -3.72f, 0.38f, 0.50f,
    1.30f, 1.00f, -4.00f, 0.88f, 0.50f,
    2.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    2.30f, 1.00f, -4.00f, 0.63f, 0.50f,
    2.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    1.30f, 0.00f, -3.00f, 0.38f, 1.00f,
    2.30f, 0.00f, -3.00f, 0.38f, 0.75f,
    1.30f, 1.00f, -3.00f, 0.63f, 0.00f,
    1.30f, 0.00f, -4.00f, 0.38f, 0.25f,
    1.30f, 0.00f, -3.00f, 0.38f, 0.00f,
    2.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    1.30f, 0.00f, -3.00f, 0.13f, 0.75f,
    1.30f, 0.00f, -4.00f, 0.13f, 0.50f,
    2.30f, 1.00f, -4.00f, 0.63f, 0.50f,
    2.30f, 0.00f, -3.00f, 0.38f, 0.75f,
    2.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    1.30f, 1.00f, -4.00f, 0.63f, 0.25f,
    2.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    1.30f, 0.00f, -4.00f, 0.38f, 0.25f,
    1.30f, 1.00f, -4.00f, 0.88f, 0.50f,
    1.30f, 1.00f, -3.00f, 0.88f, 0.75f,
    2.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    2.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    1.30f, 1.00f, -3.00f, 0.63f, 1.00f,
    1.30f, 0.00f, -3.00f, 0.38f, 1.00f,
    1.30f, 1.00f, -3.00f, 0.63f, 0.00f,
    1.30f, 1.00f, -4.00f, 0.63f, 0.25f,
    1.30f, 0.00f, -4.00f, 0.38f, 0.25f,
    2.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    2.30f, 0.00f, -3.00f, 0.38f, 0.75f,
    1.30f, 0.00f, -3.00f, 0.13f, 0.75f,
    2.30f, 1.00f, -4.00f, 0.63f, 0.50f,
    2.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    2.30f, 0.00f, -3.00f, 0.38f, 0.75f,
    1.30f, 1.00f, -4.00f, 0.63f, 0.25f,
    2.30f, 1.00f, -4.00f, 0.63f, 0.50f,
    2.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    -2.30f, 1.00f, 2.00f, 0.88f, 0.50f,
    -1.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    -1.30f, 1.00f, 2.00f, 0.63f, 0.50f,
    -1.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    -2.30f, 0.00f, 3.00f, 0.38f, 1.00f,
    -1.30f, 0.00f, 3.00f, 0.38f, 0.75f,
    -2.30f, 1.00f, 3.00f, 0.63f, 0.00f,
    -2.30f, 0.00f, 2.00f, 0.38f, 0.25f,
    -2.30f, 0.00f, 3.00f, 0.38f, 0.00f,
    -1.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    -2.30f, 0.00f, 3.00f, 0.13f, 0.75f,
    -2.30f, 0.00f, 2.00f, 0.13f, 0.50f,
    -1.30f, 1.00f, 2.00f, 0.63f, 0.50f,
    -1.30f, 0.00f, 3.00f, 0.38f, 0.75f,
    -1.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    -2.30f, 1.00f, 2.00f, 0.63f, 0.25f,
    -1.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    -2.30f, 0.00f, 2.00f, 0.38f, 0.25f,
    -2.30f, 1.00f, 2.00f, 0.88f, 0.50f,
    -2.30f, 1.00f, 3.00f, 0.88f, 0.75f,
    -1.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    -1.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    -2.30f, 1.00f, 3.00f, 0.63f, 1.00f,
    -2.30f, 0.00f, 3.00f, 0.38f, 1.00f,
    -2.30f, 1.00f, 3.00f, 0.63f, 0.00f,
    -2.30f, 1.00f, 2.00f, 0.63f, 0.25f,
    -2.30f, 0.00f, 2.00f, 0.38f, 0.25f,
    -1.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    -1.30f, 0.00f, 3.00f, 0.38f, 0.75f,
    -2.30f, 0.00f, 3.00f, 0.13f, 0.75f,
    -1.30f, 1.00f, 2.00f, 0.63f, 0.50f,
    -1.30f, 1.00f, 3.00f, 0.63f, 0.75f,
    -1.30f, 0.00f, 3.00f, 0.38f, 0.75f,
    -2.30f, 1.00f, 2.00f, 0.63f, 0.25f,
    -1.30f, 1.00f, 2.00f, 0.63f, 0.50f,
    -1.30f, 0.00f, 2.00f, 0.38f, 0.50f,
    -2.30f, 1.00f, -4.00f, 0.88f, 0.50f,
    -1.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    -1.30f, 1.00f, -4.00f, 0.63f, 0.50f,
    -1.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    -2.30f, 0.00f, -3.00f, 0.38f, 1.00f,
    -1.30f, 0.00f, -3.00f, 0.38f, 0.75f,
    -2.30f, 1.00f, -3.00f, 0.63f, 0.00f,
    -2.30f, 0.00f, -4.00f, 0.38f, 0.25f,
    -2.30f, 0.00f, -3.00f, 0.38f, 0.00f,
    -1.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    -2.30f, 0.00f, -3.00f, 0.13f, 0.75f,
    -2.30f, 0.00f, -4.00f, 0.13f, 0.50f,
    -1.30f, 1.00f, -4.00f, 0.63f, 0.50f,
    -1.30f, 0.00f, -3.00f, 0.38f, 0.75f,
    -1.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    -2.30f, 1.00f, -4.00f, 0.63f, 0.25f,
    -1.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    -2.30f, 0.00f, -4.00f, 0.38f, 0.25f,
    -2.30f, 1.00f, -4.00f, 0.88f, 0.50f,
    -2.30f, 1.00f, -3.00f, 0.88f, 0.75f,
    -1.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    -1.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    -2.30f, 1.00f, -3.00f, 0.63f, 1.00f,
    -2.30f, 0.00f, -3.00f, 0.38f, 1.00f,
    -2.30f, 1.00f, -3.00f, 0.63f, 0.00f,
    -2.30f, 1.00f, -4.00f, 0.63f, 0.25f,
    -2.30f, 0.00f, -4.00f, 0.38f, 0.25f,
    -1.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    -1.30f, 0.00f, -3.00f, 0.38f, 0.75f,
    -2.30f, 0.00f, -3.00f, 0.13f, 0.75f,
    -1.30f, 1.00f, -4.00f, 0.63f, 0.50f,
    -1.30f, 1.00f, -3.00f, 0.63f, 0.75f,
    -1.30f, 0.00f, -3.00f, 0.38f, 0.75f,
    -2.30f, 1.00f, -4.00f, 0.63f, 0.25f,
    -1.30f, 1.00f, -4.00f, 0.63f, 0.50f,
    -1.30f, 0.00f, -4.00f, 0.38f, 0.50f,
    -2.50f, 3.00f, -4.50f, 0.88f, 0.50f,
    2.50f, 3.00f, 3.50f, 0.63f, 0.75f,
    2.50f, 3.00f, -4.50f, 0.63f, 0.50f,
    2.50f, 3.00f, 3.50f, 0.63f, 0.75f,
    -2.50f, 1.00f, 3.50f, 0.38f, 1.00f,
    2.50f, 1.00f, 3.50f, 0.38f, 0.75f,
    -2.50f, 3.00f, 3.50f, 0.63f, 0.00f,
    -2.50f, 1.00f, -4.50f, 0.38f, 0.25f,
    -2.50f, 1.00f, 3.50f, 0.38f, 0.00f,
    2.50f, 1.00f, -4.50f, 0.38f, 0.50f,
    -2.50f, 1.00f, 3.50f, 0.13f, 0.75f,
    -2.50f, 1.00f, -4.50f, 0.13f, 0.50f,
    2.50f, 3.00f, -4.50f, 0.63f, 0.50f,
    2.50f, 1.00f, 3.50f, 0.38f, 0.75f,
    2.50f, 1.00f, -4.50f, 0.38f, 0.50f,
    -2.50f, 3.00f, -4.50f, 0.63f, 0.25f,
    2.50f, 1.00f, -4.50f, 0.38f, 0.50f,
    -2.50f, 1.00f, -4.50f, 0.38f, 0.25f,
    -2.50f, 3.00f, -4.50f, 0.88f, 0.50f,
    -2.50f, 3.00f, 3.50f, 0.88f, 0.75f,
    2.50f, 3.00f, 3.50f, 0.63f, 0.75f,
    2.50f, 3.00f, 3.50f, 0.63f, 0.75f,
    -2.50f, 3.00f, 3.50f, 0.63f, 1.00f,
    -2.50f, 1.00f, 3.50f, 0.38f, 1.00f,
    -2.50f, 3.00f, 3.50f, 0.63f, 0.00f,
    -2.50f, 3.00f, -4.50f, 0.63f, 0.25f,
    -2.50f, 1.00f, -4.50f, 0.38f, 0.25f,
    2.50f, 1.00f, -4.50f, 0.38f, 0.50f,
    2.50f, 1.00f, 3.50f, 0.38f, 0.75f,
    -2.50f, 1.00f, 3.50f, 0.13f, 0.75f,
    2.50f, 3.00f, -4.50f, 0.63f, 0.50f,
    2.50f, 3.00f, 3.50f, 0.63f, 0.75f,
    2.50f, 1.00f, 3.50f, 0.38f, 0.75f,
    -2.50f, 3.00f, -4.50f, 0.63f, 0.25f,
    2.50f, 3.00f, -4.50f, 0.63f, 0.50f,
    2.50f, 1.00f, -4.50f, 0.38f, 0.50f
};

float placaVertices[] = {
    0.0f, 5.47798f, -0.11137f, 1.0f, 1.0f,
    0.02222f, 0.0f, -0.10919f, 0.96875f, 0.5f,
    0.0f, 0.0f, -0.11137f, 1.0f, 0.5f,
    0.02222f, 5.47798f, -0.10919f, 0.96875f, 1.0f,
    0.04358f, 0.0f, -0.1027f, 0.9375f, 0.5f,
    0.02222f, 0.0f, -0.10919f, 0.96875f, 0.5f,
    0.04358f, 5.47798f, -0.1027f, 0.9375f, 1.0f,
    0.06327f, 0.0f, -0.09218f, 0.90625f, 0.5f,
    0.04358f, 0.0f, -0.1027f, 0.9375f, 0.5f,
    0.06327f, 5.47798f, -0.09218f, 0.90625f, 1.0f,
    0.08053f, 0.0f, -0.07802f, 0.875f, 0.5f,
    0.06327f, 0.0f, -0.09218f, 0.90625f, 0.5f,
    0.08053f, 5.47798f, -0.07802f, 0.875f, 1.0f,
    0.09469f, 0.0f, -0.06076f, 0.84375f, 0.5f,
    0.08053f, 0.0f, -0.07802f, 0.875f, 0.5f,
    0.09469f, 5.47798f, -0.06076f, 0.84375f, 1.0f,
    0.10521f, 0.0f, -0.04107f, 0.8125f, 0.5f,
    0.09469f, 0.0f, -0.06076f, 0.84375f, 0.5f,
    0.10521f, 5.47798f, -0.04107f, 0.8125f, 1.0f,
    0.11169f, 0.0f, -0.01971f, 0.78125f, 0.5f,
    0.10521f, 0.0f, -0.04107f, 0.8125f, 0.5f,
    0.11169f, 5.47798f, -0.01971f, 0.78125f, 1.0f,
    0.11388f, 0.0f, 0.00251f, 0.75f, 0.5f,
    0.11169f, 0.0f, -0.01971f, 0.78125f, 0.5f,
    0.11388f, 5.47798f, 0.00251f, 0.75f, 1.0f,
    0.11169f, 0.0f, 0.02473f, 0.71875f, 0.5f,
    0.11388f, 0.0f, 0.00251f, 0.75f, 0.5f,
    0.11169f, 5.47798f, 0.02473f, 0.71875f, 1.0f,
    0.10521f, 0.0f, 0.04609f, 0.6875f, 0.5f,
    0.11169f, 0.0f, 0.02473f, 0.71875f, 0.5f,
    0.10521f, 5.47798f, 0.04609f, 0.6875f, 1.0f,
    0.09469f, 0.0f, 0.06578f, 0.65625f, 0.5f,
    0.10521f, 0.0f, 0.04609f, 0.6875f, 0.5f,
    0.09469f, 5.47798f, 0.06578f, 0.65625f, 1.0f,
    0.08053f, 0.0f, 0.08303f, 0.625f, 0.5f,
    0.09469f, 0.0f, 0.06578f, 0.65625f, 0.5f,
    0.08053f, 5.47798f, 0.08303f, 0.625f, 1.0f,
    0.06327f, 0.0f, 0.0972f, 0.59375f, 0.5f,
    0.08053f, 0.0f, 0.08303f, 0.625f, 0.5f,
    0.06327f, 5.47798f, 0.0972f, 0.59375f, 1.0f,
    0.04358f, 0.0f, 0.10772f, 0.5625f, 0.5f,
    0.06327f, 0.0f, 0.0972f, 0.59375f, 0.5f,
    0.04358f, 5.47798f, 0.10772f, 0.5625f, 1.0f,
    0.02222f, 0.0f, 0.1142f, 0.53125f, 0.5f,
    0.04358f, 0.0f, 0.10772f, 0.5625f, 0.5f,
    0.02222f, 5.47798f, 0.1142f, 0.53125f, 1.0f,
    0.0f, 0.0f, 0.11639f, 0.5f, 0.5f,
    0.02222f, 0.0f, 0.1142f, 0.53125f, 0.5f,
    0.0f, 5.47798f, 0.11639f, 0.5f, 1.0f,
    -0.02222f, 0.0f, 0.1142f, 0.46875f, 0.5f,
    0.0f, 0.0f, 0.11639f, 0.5f, 0.5f,
    -0.02222f, 5.47798f, 0.1142f, 0.46875f, 1.0f,
    -0.04358f, 0.0f, 0.10772f, 0.4375f, 0.5f,
    -0.02222f, 0.0f, 0.1142f, 0.46875f, 0.5f,
    -0.04358f, 5.47798f, 0.10772f, 0.4375f, 1.0f,
    -0.06327f, 0.0f, 0.0972f, 0.40625f, 0.5f,
    -0.04358f, 0.0f, 0.10772f, 0.4375f, 0.5f,
    -0.06327f, 5.47798f, 0.0972f, 0.40625f, 1.0f,
    -0.08053f, 0.0f, 0.08303f, 0.375f, 0.5f,
    -0.06327f, 0.0f, 0.0972f, 0.40625f, 0.5f,
    -0.08053f, 5.47798f, 0.08303f, 0.375f, 1.0f,
    -0.09469f, 0.0f, 0.06578f, 0.34375f, 0.5f,
    -0.08053f, 0.0f, 0.08303f, 0.375f, 0.5f,
    -0.09469f, 5.47798f, 0.06578f, 0.34375f, 1.0f,
    -0.10521f, 0.0f, 0.04609f, 0.3125f, 0.5f,
    -0.09469f, 0.0f, 0.06578f, 0.34375f, 0.5f,
    -0.10521f, 5.47798f, 0.04609f, 0.3125f, 1.0f,
    -0.11169f, 0.0f, 0.02473f, 0.28125f, 0.5f,
    -0.10521f, 0.0f, 0.04609f, 0.3125f, 0.5f,
    -0.11169f, 5.47798f, 0.02473f, 0.28125f, 1.0f,
    -0.11388f, 0.0f, 0.00251f, 0.25f, 0.5f,
    -0.11169f, 0.0f, 0.02473f, 0.28125f, 0.5f,
    -0.11388f, 5.47798f, 0.00251f, 0.25f, 1.0f,
    -0.11169f, 0.0f, -0.01971f, 0.21875f, 0.5f,
    -0.11388f, 0.0f, 0.00251f, 0.25f, 0.5f,
    -0.11169f, 5.47798f, -0.01971f, 0.21875f, 1.0f,
    -0.10521f, 0.0f, -0.04107f, 0.1875f, 0.5f,
    -0.11169f, 0.0f, -0.01971f, 0.21875f, 0.5f,
    -0.10521f, 5.47798f, -0.04107f, 0.1875f, 1.0f,
    -0.09469f, 0.0f, -0.06076f, 0.15625f, 0.5f,
    -0.10521f, 0.0f, -0.04107f, 0.1875f, 0.5f,
    -0.09469f, 5.47798f, -0.06076f, 0.15625f, 1.0f,
    -0.08053f, 0.0f, -0.07802f, 0.125f, 0.5f,
    -0.09469f, 0.0f, -0.06076f, 0.15625f, 0.5f,
    -0.08053f, 5.47798f, -0.07802f, 0.125f, 1.0f,
    -0.06327f, 0.0f, -0.09218f, 0.09375f, 0.5f,
    -0.08053f, 0.0f, -0.07802f, 0.125f, 0.5f,
    -0.06327f, 5.47798f, -0.09218f, 0.09375f, 1.0f,
    -0.04358f, 0.0f, -0.1027f, 0.0625f, 0.5f,
    -0.06327f, 0.0f, -0.09218f, 0.09375f, 0.5f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    -0.04358f, 5.47798f, -0.1027f, 0.0625f, 1.0f,
    -0.02222f, 0.0f, -0.10919f, 0.03125f, 0.5f,
    -0.04358f, 0.0f, -0.1027f, 0.0625f, 0.5f,
    -0.02222f, 5.47798f, -0.10919f, 0.03125f, 1.0f,
    0.0f, 0.0f, -0.11137f, 0.0f, 0.5f,
    -0.02222f, 0.0f, -0.10919f, 0.03125f, 0.5f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.0f, 5.47798f, -0.11137f, 1.0f, 1.0f,
    0.02222f, 5.47798f, -0.10919f, 0.96875f, 1.0f,
    0.02222f, 0.0f, -0.10919f, 0.96875f, 0.5f,
    0.02222f, 5.47798f, -0.10919f, 0.96875f, 1.0f,
    0.04358f, 5.47798f, -0.1027f, 0.9375f, 1.0f,
    0.04358f, 0.0f, -0.1027f, 0.9375f, 0.5f,
    0.04358f, 5.47798f, -0.1027f, 0.9375f, 1.0f,
    0.06327f, 5.47798f, -0.09218f, 0.90625f, 1.0f,
    0.06327f, 0.0f, -0.09218f, 0.90625f, 0.5f,
    0.06327f, 5.47798f, -0.09218f, 0.90625f, 1.0f,
    0.08053f, 5.47798f, -0.07802f, 0.875f, 1.0f,
    0.08053f, 0.0f, -0.07802f, 0.875f, 0.5f,
    0.08053f, 5.47798f, -0.07802f, 0.875f, 1.0f,
    0.09469f, 5.47798f, -0.06076f, 0.84375f, 1.0f,
    0.09469f, 0.0f, -0.06076f, 0.84375f, 0.5f,
    0.09469f, 5.47798f, -0.06076f, 0.84375f, 1.0f,
    0.10521f, 5.47798f, -0.04107f, 0.8125f, 1.0f,
    0.10521f, 0.0f, -0.04107f, 0.8125f, 0.5f,
    0.10521f, 5.47798f, -0.04107f, 0.8125f, 1.0f,
    0.11169f, 5.47798f, -0.01971f, 0.78125f, 1.0f,
    0.11169f, 0.0f, -0.01971f, 0.78125f, 0.5f,
    0.11169f, 5.47798f, -0.01971f, 0.78125f, 1.0f,
    0.11388f, 5.47798f, 0.00251f, 0.75f, 1.0f,
    0.11388f, 0.0f, 0.00251f, 0.75f, 0.5f,
    0.11388f, 5.47798f, 0.00251f, 0.75f, 1.0f,
    0.11169f, 5.47798f, 0.02473f, 0.71875f, 1.0f,
    0.11169f, 0.0f, 0.02473f, 0.71875f, 0.5f,
    0.11169f, 5.47798f, 0.02473f, 0.71875f, 1.0f,
    0.10521f, 5.47798f, 0.04609f, 0.6875f, 1.0f,
    0.10521f, 0.0f, 0.04609f, 0.6875f, 0.5f,
    0.10521f, 5.47798f, 0.04609f, 0.6875f, 1.0f,
    0.09469f, 5.47798f, 0.06578f, 0.65625f, 1.0f,
    0.09469f, 0.0f, 0.06578f, 0.65625f, 0.5f,
    0.09469f, 5.47798f, 0.06578f, 0.65625f, 1.0f,
    0.08053f, 5.47798f, 0.08303f, 0.625f, 1.0f,
    0.08053f, 0.0f, 0.08303f, 0.625f, 0.5f,
    0.08053f, 5.47798f, 0.08303f, 0.625f, 1.0f,
    0.06327f, 5.47798f, 0.0972f, 0.59375f, 1.0f,
    0.06327f, 0.0f, 0.0972f, 0.59375f, 0.5f,
    0.06327f, 5.47798f, 0.0972f, 0.59375f, 1.0f,
    0.04358f, 5.47798f, 0.10772f, 0.5625f, 1.0f,
    0.04358f, 0.0f, 0.10772f, 0.5625f, 0.5f,
    0.04358f, 5.47798f, 0.10772f, 0.5625f, 1.0f,
    0.02222f, 5.47798f, 0.1142f, 0.53125f, 1.0f,
    0.02222f, 0.0f, 0.1142f, 0.53125f, 0.5f,
    0.02222f, 5.47798f, 0.1142f, 0.53125f, 1.0f,
    0.0f, 5.47798f, 0.11639f, 0.5f, 1.0f,
    0.0f, 0.0f, 0.11639f, 0.5f, 0.5f,
    0.0f, 5.47798f, 0.11639f, 0.5f, 1.0f,
    -0.02222f, 5.47798f, 0.1142f, 0.46875f, 1.0f,
    -0.02222f, 0.0f, 0.1142f, 0.46875f, 0.5f,
    -0.02222f, 5.47798f, 0.1142f, 0.46875f, 1.0f,
    -0.04358f, 5.47798f, 0.10772f, 0.4375f, 1.0f,
    -0.04358f, 0.0f, 0.10772f, 0.4375f, 0.5f,
    -0.04358f, 5.47798f, 0.10772f, 0.4375f, 1.0f,
    -0.06327f, 5.47798f, 0.0972f, 0.40625f, 1.0f,
    -0.06327f, 0.0f, 0.0972f, 0.40625f, 0.5f,
    -0.06327f, 5.47798f, 0.0972f, 0.40625f, 1.0f,
    -0.08053f, 5.47798f, 0.08303f, 0.375f, 1.0f,
    -0.08053f, 0.0f, 0.08303f, 0.375f, 0.5f,
    -0.08053f, 5.47798f, 0.08303f, 0.375f, 1.0f,
    -0.09469f, 5.47798f, 0.06578f, 0.34375f, 1.0f,
    -0.09469f, 0.0f, 0.06578f, 0.34375f, 0.5f,
    -0.09469f, 5.47798f, 0.06578f, 0.34375f, 1.0f,
    -0.10521f, 5.47798f, 0.04609f, 0.3125f, 1.0f,
    -0.10521f, 0.0f, 0.04609f, 0.3125f, 0.5f,
    -0.10521f, 5.47798f, 0.04609f, 0.3125f, 1.0f,
    -0.11169f, 5.47798f, 0.02473f, 0.28125f, 1.0f,
    -0.11169f, 0.0f, 0.02473f, 0.28125f, 0.5f,
    -0.11169f, 5.47798f, 0.02473f, 0.28125f, 1.0f,
    -0.11388f, 5.47798f, 0.00251f, 0.25f, 1.0f,
    -0.11388f, 0.0f, 0.00251f, 0.25f, 0.5f,
    -0.11388f, 5.47798f, 0.00251f, 0.25f, 1.0f,
    -0.11169f, 5.47798f, -0.01971f, 0.21875f, 1.0f,
    -0.11169f, 0.0f, -0.01971f, 0.21875f, 0.5f,
    -0.11169f, 5.47798f, -0.01971f, 0.21875f, 1.0f,
    -0.10521f, 5.47798f, -0.04107f, 0.1875f, 1.0f,
    -0.10521f, 0.0f, -0.04107f, 0.1875f, 0.5f,
    -0.10521f, 5.47798f, -0.04107f, 0.1875f, 1.0f,
    -0.09469f, 5.47798f, -0.06076f, 0.15625f, 1.0f,
    -0.09469f, 0.0f, -0.06076f, 0.15625f, 0.5f,
    -0.09469f, 5.47798f, -0.06076f, 0.15625f, 1.0f,
    -0.08053f, 5.47798f, -0.07802f, 0.125f, 1.0f,
    -0.08053f, 0.0f, -0.07802f, 0.125f, 0.5f,
    -0.08053f, 5.47798f, -0.07802f, 0.125f, 1.0f,
    -0.06327f, 5.47798f, -0.09218f, 0.09375f, 1.0f,
    -0.06327f, 0.0f, -0.09218f, 0.09375f, 0.5f,
    -0.06327f, 5.47798f, -0.09218f, 0.09375f, 1.0f,
    -0.04358f, 5.47798f, -0.1027f, 0.0625f, 1.0f,
    -0.04358f, 0.0f, -0.1027f, 0.0625f, 0.5f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.02222f, 5.47798f, -0.10919f, 0.29682f, 0.48539f,
    0.0f, 5.47798f, -0.11137f, 0.25f, 0.49f,
    0.0f, 5.47798f, -0.11137f, 0.25f, 0.49f,
    -0.02222f, 5.47798f, -0.10919f, 0.20318f, 0.48539f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.06327f, 5.47798f, -0.09218f, 0.11666f, 0.44955f,
    -0.08053f, 5.47798f, -0.07802f, 0.08029f, 0.41971f,
    -0.08053f, 5.47798f, -0.07802f, 0.08029f, 0.41971f,
    -0.09469f, 5.47798f, -0.06076f, 0.05045f, 0.38334f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.11169f, 5.47798f, -0.01971f, 0.01461f, 0.29682f,
    -0.11388f, 5.47798f, 0.00251f, 0.01f, 0.25f,
    -0.11388f, 5.47798f, 0.00251f, 0.01f, 0.25f,
    -0.11169f, 5.47798f, 0.02473f, 0.01461f, 0.20318f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.09469f, 5.47798f, 0.06578f, 0.05045f, 0.11666f,
    -0.08053f, 5.47798f, 0.08303f, 0.08029f, 0.08029f,
    -0.08053f, 5.47798f, 0.08303f, 0.08029f, 0.08029f,
    -0.06327f, 5.47798f, 0.0972f, 0.11666f, 0.05045f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.02222f, 5.47798f, 0.1142f, 0.20318f, 0.01461f,
    0.0f, 5.47798f, 0.11639f, 0.25f, 0.01f,
    0.0f, 5.47798f, 0.11639f, 0.25f, 0.01f,
    0.02222f, 5.47798f, 0.1142f, 0.29682f, 0.01461f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.06327f, 5.47798f, 0.0972f, 0.38334f, 0.05045f,
    0.08053f, 5.47798f, 0.08303f, 0.41971f, 0.08029f,
    0.08053f, 5.47798f, 0.08303f, 0.41971f, 0.08029f,
    0.09469f, 5.47798f, 0.06578f, 0.44955f, 0.11666f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.11169f, 5.47798f, 0.02473f, 0.48539f, 0.20318f,
    0.11388f, 5.47798f, 0.00251f, 0.49f, 0.25f,
    0.11388f, 5.47798f, 0.00251f, 0.49f, 0.25f,
    0.11169f, 5.47798f, -0.01971f, 0.48539f, 0.29682f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.09469f, 5.47798f, -0.06076f, 0.44955f, 0.38334f,
    0.08053f, 5.47798f, -0.07802f, 0.41971f, 0.41971f,
    0.08053f, 5.47798f, -0.07802f, 0.41971f, 0.41971f,
    0.06327f, 5.47798f, -0.09218f, 0.38334f, 0.44955f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.0f, 5.47798f, -0.11137f, 0.25f, 0.49f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.08053f, 5.47798f, -0.07802f, 0.08029f, 0.41971f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.11388f, 5.47798f, 0.00251f, 0.01f, 0.25f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.08053f, 5.47798f, 0.08303f, 0.08029f, 0.08029f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    0.0f, 5.47798f, 0.11639f, 0.25f, 0.01f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.08053f, 5.47798f, 0.08303f, 0.41971f, 0.08029f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.11388f, 5.47798f, 0.00251f, 0.49f, 0.25f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.08053f, 5.47798f, -0.07802f, 0.41971f, 0.41971f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.04358f, 5.47798f, -0.1027f, 0.0625f, 1.0f,
    -0.02222f, 5.47798f, -0.10919f, 0.03125f, 1.0f,
    -0.02222f, 0.0f, -0.10919f, 0.03125f, 0.5f,
    -0.02222f, 5.47798f, -0.10919f, 0.03125f, 1.0f,
    0.0f, 5.47798f, -0.11137f, 0.0f, 1.0f,
    0.0f, 0.0f, -0.11137f, 0.0f, 0.5f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.0f, 0.0f, -0.11137f, 0.75f, 0.49f,
    0.02222f, 0.0f, -0.10919f, 0.79682f, 0.48539f,
    0.02222f, 0.0f, -0.10919f, 0.79682f, 0.48539f,
    0.04358f, 0.0f, -0.1027f, 0.84184f, 0.47173f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.08053f, 0.0f, -0.07802f, 0.91971f, 0.41971f,
    0.09469f, 0.0f, -0.06076f, 0.94955f, 0.38334f,
    0.09469f, 0.0f, -0.06076f, 0.94955f, 0.38334f,
    0.10521f, 0.0f, -0.04107f, 0.97173f, 0.34184f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11388f, 0.0f, 0.00251f, 0.99f, 0.25f,
    0.11169f, 0.0f, 0.02473f, 0.98539f, 0.20318f,
    0.11169f, 0.0f, 0.02473f, 0.98539f, 0.20318f,
    0.10521f, 0.0f, 0.04609f, 0.97173f, 0.15816f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.08053f, 0.0f, 0.08303f, 0.91971f, 0.08029f,
    0.06327f, 0.0f, 0.0972f, 0.88334f, 0.05045f,
    0.06327f, 0.0f, 0.0972f, 0.88334f, 0.05045f,
    0.04358f, 0.0f, 0.10772f, 0.84184f, 0.02827f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    0.0f, 0.0f, 0.11639f, 0.75f, 0.01f,
    -0.02222f, 0.0f, 0.1142f, 0.70318f, 0.01461f,
    -0.02222f, 0.0f, 0.1142f, 0.70318f, 0.01461f,
    -0.04358f, 0.0f, 0.10772f, 0.65816f, 0.02827f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.08053f, 0.0f, 0.08303f, 0.58029f, 0.08029f,
    -0.09469f, 0.0f, 0.06578f, 0.55045f, 0.11666f,
    -0.09469f, 0.0f, 0.06578f, 0.55045f, 0.11666f,
    -0.10521f, 0.0f, 0.04609f, 0.52827f, 0.15816f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11388f, 0.0f, 0.00251f, 0.51f, 0.25f,
    -0.11169f, 0.0f, -0.01971f, 0.51461f, 0.29682f,
    -0.11169f, 0.0f, -0.01971f, 0.51461f, 0.29682f,
    -0.10521f, 0.0f, -0.04107f, 0.52827f, 0.34184f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.08053f, 0.0f, -0.07802f, 0.58029f, 0.41971f,
    -0.06327f, 0.0f, -0.09218f, 0.61666f, 0.44955f,
    -0.06327f, 0.0f, -0.09218f, 0.61666f, 0.44955f,
    -0.04358f, 0.0f, -0.1027f, 0.65816f, 0.47173f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.02222f, 0.0f, -0.10919f, 0.79682f, 0.48539f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.09469f, 0.0f, -0.06076f, 0.94955f, 0.38334f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11169f, 0.0f, 0.02473f, 0.98539f, 0.20318f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.06327f, 0.0f, 0.0972f, 0.88334f, 0.05045f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    -0.02222f, 0.0f, 0.1142f, 0.70318f, 0.01461f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.09469f, 0.0f, 0.06578f, 0.55045f, 0.11666f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11169f, 0.0f, -0.01971f, 0.51461f, 0.29682f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.06327f, 0.0f, -0.09218f, 0.61666f, 0.44955f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    -1.05782f, 3.78637f, -0.31016f, 0.625f, 0.0f,
    1.05782f, 3.78637f, -0.08984f, 0.375f, 0.25f,
    -1.05782f, 3.78637f, -0.08984f, 0.375f, 0.0f,
    1.05782f, 3.78637f, -0.31016f, 0.625f, 0.25f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    1.05782f, 3.78637f, -0.08984f, 0.375f, 0.25f,
    1.05782f, 5.90201f, -0.31016f, 0.625f, 0.5f,
    -1.05782f, 5.90201f, -0.08984f, 0.375f, 0.75f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f,
    -1.05782f, 3.78637f, -0.08984f, 0.375f, 1.0f,
    -1.05782f, 5.90201f, -0.08984f, 0.375f, 0.75f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    -1.05782f, 3.78637f, -0.08984f, 0.125f, 0.75f,
    1.05782f, 3.78637f, -0.08984f, 0.125f, 0.5f,
    1.05782f, 3.78637f, -0.31016f, 0.875f, 0.5f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f,
    1.05782f, 5.90201f, -0.31016f, 0.625f, 0.5f,
    -1.05782f, 3.78637f, -0.31016f, 0.625f, 0.0f,
    1.05782f, 3.78637f, -0.31016f, 0.625f, 0.25f,
    1.05782f, 3.78637f, -0.08984f, 0.375f, 0.25f,
    1.05782f, 3.78637f, -0.31016f, 0.625f, 0.25f,
    1.05782f, 5.90201f, -0.31016f, 0.625f, 0.5f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    1.05782f, 5.90201f, -0.31016f, 0.625f, 0.5f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f,
    -1.05782f, 5.90201f, -0.08984f, 0.375f, 0.75f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f,
    -1.05782f, 3.78637f, -0.31016f, 0.625f, 1.0f,
    -1.05782f, 3.78637f, -0.08984f, 0.375f, 1.0f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    -1.05782f, 5.90201f, -0.08984f, 0.375f, 0.75f,
    -1.05782f, 3.78637f, -0.08984f, 0.125f, 0.75f,
    1.05782f, 3.78637f, -0.31016f, 0.875f, 0.5f,
    -1.05782f, 3.78637f, -0.31016f, 0.875f, 0.75f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f};

float arcoVertices[] = {
    4.0f, 0.0f, -4.0f, -8.0f, -13.0f,
    4.0f, 0.0f, -4.0f, -8.0f, -13.0f,
    4.0f, 0.0f, -4.0f, -8.0f, -13.0f,
    4.0f, 0.0f, -4.0f, 8.0f, -13.0f,
    1.0f, 0.0f, -4.0f, 8.0f, -10.0f,
    1.0f, 0.0f, -6.0f, 7.0f, -12.0f,
    4.0f, 0.0f, -4.0f, -3.0f, -0.0f,
    4.0f, 0.0f, -6.0f, -2.0f, -0.0f,
    4.0f, 6.0f, -6.0f, -2.0f, 7.0f,
    10.0f, 10.0f, -4.0f, 14.0f, 12.0f,
    6.0f, 8.0f, -4.0f, 11.0f, 10.0f,
    8.0f, 8.0f, -4.0f, 13.0f, 10.0f,
    12.0f, 6.0f, -4.0f, 2.0f, -13.0f,
    12.0f, 7.0f, -6.0f, 1.0f, -11.0f,
    13.0f, 6.0f, -6.0f, 1.0f, -13.0f,
    10.0f, 8.0f, -4.0f, 2.0f, -19.0f,
    12.0f, 7.0f, -6.0f, 1.0f, -21.0f,
    11.0f, 7.0f, -4.0f, 2.0f, -21.0f,
    10.0f, 8.0f, -4.0f, 2.0f, -26.0f,
    8.0f, 8.0f, -6.0f, 1.0f, -24.0f,
    10.0f, 8.0f, -6.0f, 1.0f, -26.0f,
    6.0f, 8.0f, -4.0f, -2.0f, 25.0f,
    8.0f, 8.0f, -6.0f, -1.0f, 27.0f,
    8.0f, 8.0f, -4.0f, -2.0f, 27.0f,
    6.0f, 8.0f, -4.0f, -2.0f, 25.0f,
    5.0f, 7.0f, -6.0f, -2.0f, 23.0f,
    6.0f, 8.0f, -6.0f, -1.0f, 25.0f,
    4.0f, 7.0f, -4.0f, -3.0f, 20.0f,
    4.0f, 6.0f, -6.0f, -2.0f, 18.0f,
    5.0f, 7.0f, -6.0f, -2.0f, 20.0f,
    10.0f, 8.0f, -6.0f, -14.0f, 10.0f,
    8.0f, 8.0f, -6.0f, -13.0f, 10.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    1.0f, 6.0f, -4.0f, 3.0f, 8.0f,
    1.0f, 0.0f, -6.0f, 2.0f, -0.0f,
    1.0f, 0.0f, -4.0f, 3.0f, -0.0f,
    1.0f, 6.0f, -4.0f, 3.0f, 15.0f,
    2.0f, 7.0f, -6.0f, 2.0f, 16.0f,
    1.0f, 6.0f, -6.0f, 2.0f, 15.0f,
    1.0f, 7.0f, -4.0f, 3.0f, 19.0f,
    4.0f, 9.0f, -6.0f, 2.0f, 22.0f,
    2.0f, 7.0f, -6.0f, 2.0f, 19.0f,
    5.0f, 10.0f, -4.0f, 2.0f, 26.0f,
    4.0f, 9.0f, -6.0f, 2.0f, 23.0f,
    3.0f, 9.0f, -4.0f, 3.0f, 23.0f,
    8.0f, 10.0f, -4.0f, 2.0f, 27.0f,
    6.0f, 10.0f, -6.0f, 1.0f, 24.0f,
    5.0f, 10.0f, -4.0f, 2.0f, 24.0f,
    8.0f, 10.0f, -4.0f, -2.0f, -23.0f,
    11.0f, 10.0f, -6.0f, -1.0f, -26.0f,
    8.0f, 10.0f, -6.0f, -1.0f, -23.0f,
    13.0f, 9.0f, -4.0f, -2.0f, -23.0f,
    11.0f, 10.0f, -6.0f, -1.0f, -20.0f,
    10.0f, 10.0f, -4.0f, -2.0f, -20.0f,
    13.0f, 9.0f, -4.0f, -2.0f, -14.0f,
    15.0f, 7.0f, -6.0f, -1.0f, -17.0f,
    13.0f, 9.0f, -6.0f, -1.0f, -14.0f,
    15.0f, 6.0f, -4.0f, -2.0f, -8.0f,
    15.0f, 7.0f, -6.0f, -1.0f, -7.0f,
    14.0f, 7.0f, -4.0f, -2.0f, -7.0f,
    15.0f, 0.0f, -4.0f, -2.0f, -0.0f,
    15.0f, 6.0f, -6.0f, -1.0f, 8.0f,
    15.0f, 6.0f, -4.0f, -2.0f, 8.0f,
    15.0f, 0.0f, -4.0f, 12.0f, -25.0f,
    13.0f, 0.0f, -6.0f, 10.0f, -23.0f,
    15.0f, 0.0f, -6.0f, 11.0f, -26.0f,
    12.0f, 6.0f, -4.0f, 2.0f, 7.0f,
    13.0f, 0.0f, -6.0f, 1.0f, 0.0f,
    12.0f, 0.0f, -4.0f, 2.0f, 0.0f,
    1.0f, 0.0f, -6.0f, 7.0f, -12.0f,
    4.0f, 0.0f, -6.0f, 8.0f, -15.0f,
    4.0f, 0.0f, -4.0f, 8.0f, -13.0f,
    4.0f, 0.0f, -4.0f, 8.0f, -13.0f,
    4.0f, 0.0f, -4.0f, 8.0f, -13.0f,
    1.0f, 0.0f, -4.0f, 8.0f, -10.0f,
    1.0f, 0.0f, -6.0f, 7.0f, -12.0f,
    4.0f, 0.0f, -4.0f, 8.0f, -13.0f,
    4.0f, 0.0f, -4.0f, 8.0f, -13.0f,
    4.0f, 6.0f, -6.0f, -2.0f, 7.0f,
    4.0f, 6.0f, -4.0f, -3.0f, 7.0f,
    4.0f, 0.0f, -4.0f, -3.0f, -0.0f,
    4.0f, 0.0f, -4.0f, -3.0f, -0.0f,
    4.0f, 0.0f, -4.0f, -3.0f, -0.0f,
    4.0f, 0.0f, -6.0f, -2.0f, -0.0f,
    12.0f, 6.0f, -4.0f, 15.0f, 7.0f,
    12.0f, 0.0f, -4.0f, 15.0f, 0.0f,
    15.0f, 0.0f, -4.0f, 17.0f, -0.0f,
    15.0f, 0.0f, -4.0f, 17.0f, -0.0f,
    15.0f, 6.0f, -4.0f, 17.0f, 8.0f,
    14.0f, 7.0f, -4.0f, 16.0f, 9.0f,
    14.0f, 7.0f, -4.0f, 16.0f, 9.0f,
    13.0f, 9.0f, -4.0f, 15.0f, 11.0f,
    10.0f, 10.0f, -4.0f, 14.0f, 12.0f,
    10.0f, 10.0f, -4.0f, 14.0f, 12.0f,
    8.0f, 10.0f, -4.0f, 12.0f, 13.0f,
    5.0f, 10.0f, -4.0f, 11.0f, 12.0f,
    5.0f, 10.0f, -4.0f, 11.0f, 12.0f,
    3.0f, 9.0f, -4.0f, 10.0f, 11.0f,
    1.0f, 7.0f, -4.0f, 9.0f, 9.0f,
    1.0f, 7.0f, -4.0f, 9.0f, 9.0f,
    1.0f, 6.0f, -4.0f, 8.0f, 8.0f,
    1.0f, 0.0f, -4.0f, 8.0f, 0.0f,
    1.0f, 0.0f, -4.0f, 8.0f, 0.0f,
    4.0f, 0.0f, -4.0f, 10.0f, -0.0f,
    4.0f, 6.0f, -4.0f, 10.0f, 7.0f,
    1.0f, 7.0f, -4.0f, 9.0f, 9.0f,
    1.0f, 0.0f, -4.0f, 8.0f, 0.0f,
    4.0f, 6.0f, -4.0f, 10.0f, 7.0f,
    10.0f, 10.0f, -4.0f, 14.0f, 12.0f,
    5.0f, 10.0f, -4.0f, 11.0f, 12.0f,
    1.0f, 7.0f, -4.0f, 9.0f, 9.0f,
    12.0f, 6.0f, -4.0f, 15.0f, 7.0f,
    15.0f, 0.0f, -4.0f, 17.0f, -0.0f,
    14.0f, 7.0f, -4.0f, 16.0f, 9.0f,
    11.0f, 7.0f, -4.0f, 15.0f, 8.0f,
    12.0f, 6.0f, -4.0f, 15.0f, 7.0f,
    14.0f, 7.0f, -4.0f, 16.0f, 9.0f,
    1.0f, 7.0f, -4.0f, 9.0f, 9.0f,
    4.0f, 6.0f, -4.0f, 10.0f, 7.0f,
    4.0f, 7.0f, -4.0f, 10.0f, 8.0f,
    1.0f, 7.0f, -4.0f, 9.0f, 9.0f,
    4.0f, 7.0f, -4.0f, 10.0f, 8.0f,
    6.0f, 8.0f, -4.0f, 11.0f, 10.0f,
    11.0f, 7.0f, -4.0f, 15.0f, 8.0f,
    14.0f, 7.0f, -4.0f, 16.0f, 9.0f,
    10.0f, 10.0f, -4.0f, 14.0f, 12.0f,
    10.0f, 8.0f, -4.0f, 14.0f, 10.0f,
    11.0f, 7.0f, -4.0f, 15.0f, 8.0f,
    10.0f, 10.0f, -4.0f, 14.0f, 12.0f,
    10.0f, 10.0f, -4.0f, 14.0f, 12.0f,
    1.0f, 7.0f, -4.0f, 9.0f, 9.0f,
    6.0f, 8.0f, -4.0f, 11.0f, 10.0f,
    8.0f, 8.0f, -4.0f, 13.0f, 10.0f,
    10.0f, 8.0f, -4.0f, 14.0f, 10.0f,
    10.0f, 10.0f, -4.0f, 14.0f, 12.0f,
    12.0f, 6.0f, -4.0f, 2.0f, -13.0f,
    11.0f, 7.0f, -4.0f, 2.0f, -11.0f,
    12.0f, 7.0f, -6.0f, 1.0f, -11.0f,
    10.0f, 8.0f, -4.0f, 2.0f, -19.0f,
    10.0f, 8.0f, -6.0f, 1.0f, -19.0f,
    12.0f, 7.0f, -6.0f, 1.0f, -21.0f,
    10.0f, 8.0f, -4.0f, 2.0f, -26.0f,
    8.0f, 8.0f, -4.0f, 2.0f, -24.0f,
    8.0f, 8.0f, -6.0f, 1.0f, -24.0f,
    6.0f, 8.0f, -4.0f, -2.0f, 25.0f,
    6.0f, 8.0f, -6.0f, -1.0f, 25.0f,
    8.0f, 8.0f, -6.0f, -1.0f, 27.0f,
    6.0f, 8.0f, -4.0f, -2.0f, 25.0f,
    4.0f, 7.0f, -4.0f, -3.0f, 23.0f,
    5.0f, 7.0f, -6.0f, -2.0f, 23.0f,
    4.0f, 7.0f, -4.0f, -3.0f, 20.0f,
    4.0f, 6.0f, -4.0f, -3.0f, 18.0f,
    4.0f, 6.0f, -6.0f, -2.0f, 18.0f,
    4.0f, 6.0f, -6.0f, -10.0f, 7.0f,
    4.0f, 0.0f, -6.0f, -10.0f, -0.0f,
    1.0f, 0.0f, -6.0f, -9.0f, 0.0f,
    1.0f, 0.0f, -6.0f, -9.0f, 0.0f,
    1.0f, 6.0f, -6.0f, -9.0f, 8.0f,
    2.0f, 7.0f, -6.0f, -9.0f, 9.0f,
    2.0f, 7.0f, -6.0f, -9.0f, 9.0f,
    4.0f, 9.0f, -6.0f, -10.0f, 11.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    8.0f, 10.0f, -6.0f, -13.0f, 13.0f,
    11.0f, 10.0f, -6.0f, -14.0f, 12.0f,
    11.0f, 10.0f, -6.0f, -14.0f, 12.0f,
    13.0f, 9.0f, -6.0f, -15.0f, 11.0f,
    15.0f, 7.0f, -6.0f, -16.0f, 9.0f,
    15.0f, 7.0f, -6.0f, -16.0f, 9.0f,
    15.0f, 6.0f, -6.0f, -17.0f, 8.0f,
    15.0f, 0.0f, -6.0f, -17.0f, -0.0f,
    15.0f, 0.0f, -6.0f, -17.0f, -0.0f,
    13.0f, 0.0f, -6.0f, -15.0f, 0.0f,
    13.0f, 6.0f, -6.0f, -15.0f, 7.0f,
    15.0f, 7.0f, -6.0f, -16.0f, 9.0f,
    15.0f, 0.0f, -6.0f, -17.0f, -0.0f,
    13.0f, 6.0f, -6.0f, -15.0f, 7.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    11.0f, 10.0f, -6.0f, -14.0f, 12.0f,
    15.0f, 7.0f, -6.0f, -16.0f, 9.0f,
    1.0f, 0.0f, -6.0f, -9.0f, 0.0f,
    2.0f, 7.0f, -6.0f, -9.0f, 9.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    4.0f, 6.0f, -6.0f, -10.0f, 7.0f,
    1.0f, 0.0f, -6.0f, -9.0f, 0.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    15.0f, 7.0f, -6.0f, -16.0f, 9.0f,
    13.0f, 6.0f, -6.0f, -15.0f, 7.0f,
    12.0f, 7.0f, -6.0f, -15.0f, 8.0f,
    15.0f, 7.0f, -6.0f, -16.0f, 9.0f,
    12.0f, 7.0f, -6.0f, -15.0f, 8.0f,
    10.0f, 8.0f, -6.0f, -14.0f, 10.0f,
    5.0f, 7.0f, -6.0f, -11.0f, 8.0f,
    4.0f, 6.0f, -6.0f, -10.0f, 7.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    6.0f, 8.0f, -6.0f, -12.0f, 10.0f,
    5.0f, 7.0f, -6.0f, -11.0f, 8.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    15.0f, 7.0f, -6.0f, -16.0f, 9.0f,
    10.0f, 8.0f, -6.0f, -14.0f, 10.0f,
    8.0f, 8.0f, -6.0f, -13.0f, 10.0f,
    6.0f, 8.0f, -6.0f, -12.0f, 10.0f,
    6.0f, 10.0f, -6.0f, -11.0f, 12.0f,
    1.0f, 6.0f, -4.0f, 3.0f, 8.0f,
    1.0f, 6.0f, -6.0f, 2.0f, 8.0f,
    1.0f, 0.0f, -6.0f, 2.0f, -0.0f,
    1.0f, 6.0f, -4.0f, 3.0f, 15.0f,
    1.0f, 7.0f, -4.0f, 3.0f, 16.0f,
    2.0f, 7.0f, -6.0f, 2.0f, 16.0f,
    1.0f, 7.0f, -4.0f, 3.0f, 19.0f,
    3.0f, 9.0f, -4.0f, 3.0f, 22.0f,
    4.0f, 9.0f, -6.0f, 2.0f, 22.0f,
    5.0f, 10.0f, -4.0f, 2.0f, 26.0f,
    6.0f, 10.0f, -6.0f, 1.0f, 26.0f,
    4.0f, 9.0f, -6.0f, 2.0f, 23.0f,
    8.0f, 10.0f, -4.0f, 2.0f, 27.0f,
    8.0f, 10.0f, -6.0f, 1.0f, 27.0f,
    6.0f, 10.0f, -6.0f, 1.0f, 24.0f,
    8.0f, 10.0f, -4.0f, -2.0f, -23.0f,
    10.0f, 10.0f, -4.0f, -2.0f, -26.0f,
    11.0f, 10.0f, -6.0f, -1.0f, -26.0f,
    13.0f, 9.0f, -4.0f, -2.0f, -23.0f,
    13.0f, 9.0f, -6.0f, -1.0f, -23.0f,
    11.0f, 10.0f, -6.0f, -1.0f, -20.0f,
    13.0f, 9.0f, -4.0f, -2.0f, -14.0f,
    14.0f, 7.0f, -4.0f, -2.0f, -17.0f,
    15.0f, 7.0f, -6.0f, -1.0f, -17.0f,
    15.0f, 6.0f, -4.0f, -2.0f, -8.0f,
    15.0f, 6.0f, -6.0f, -1.0f, -8.0f,
    15.0f, 7.0f, -6.0f, -1.0f, -7.0f,
    15.0f, 0.0f, -4.0f, -2.0f, -0.0f,
    15.0f, 0.0f, -6.0f, -1.0f, -0.0f,
    15.0f, 6.0f, -6.0f, -1.0f, 8.0f,
    15.0f, 0.0f, -4.0f, 12.0f, -25.0f,
    12.0f, 0.0f, -4.0f, 11.0f, -22.0f,
    13.0f, 0.0f, -6.0f, 10.0f, -23.0f,
    12.0f, 6.0f, -4.0f, 2.0f, 7.0f,
    13.0f, 6.0f, -6.0f, 1.0f, 7.0f,
    13.0f, 0.0f, -6.0f, 1.0f, 0.0f};

float floorVertices[] = {
    -30.0f, -1.0f, 30.0f, 0.0f, 0.0f,
    30.0f,  -1.0f, 30.0f, 1.0f, 0.0f,
    30.0f,  -1.0f, -30.0f, 1.0f, 1.0f,
    30.0f,  -1.0f, -30.0f, 1.0f, 1.0f,
    -30.0f, -1.0f, -30.0f, 0.0f, 1.0f,
    -30.0f, -1.0f, 30.0f, 0.0f, 0.0f};

std::vector<glm::vec2> innerTrack = {
    glm::vec2(-24.0f,  4.0f),
    glm::vec2( 24.0f,  4.0f),
    glm::vec2( 24.0f, -4.0f),
    glm::vec2( 24.0f, -4.0f),
    glm::vec2(-24.0f, -4.0f),
    glm::vec2(-24.0f,  4.0f)};

std::vector<glm::vec2> outerTrack = {
    glm::vec2(-27.0f,  10.0f),
    glm::vec2( 27.0f,  10.0f),
    glm::vec2( 27.0f, -10.0f),
    glm::vec2( 27.0f, -10.0f),
    glm::vec2(-27.0f, -10.0f),
    glm::vec2(-27.0f,  10.0f)};

void framebuffer_size_callback(GLFWwindow *window, int width, int height);
void processInput(GLFWwindow *window);

bool permitirMovimentacao = true;

// settings
const unsigned int SCR_WIDTH = 800*1.25;
const unsigned int SCR_HEIGHT = 600*1.25 ;

glm::vec3 cameraPos = glm::vec3(-45.0f, 2.0f, 45.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

glm::vec3 carroPosicao(-7.0f, -1.5f, 7.0f); // Origem
float velocidadeCarro = 0.07f;
float carroRotacao = 90.0f; // Rotação inicial

glm::vec3 luzBasePosicao(0.0f, 5.0f, 0.0f); // Origem

bool isPointInsidePolygon(const glm::vec2 &point, const std::vector<glm::vec2> &polygon)
{
    int intersections = 0;
    size_t n = polygon.size();

    for (size_t i = 0; i < n; i++)
    {
        glm::vec2 v1 = polygon[i];
        glm::vec2 v2 = polygon[(i + 1) % n];

        // Verifica se o ponto está entre a borda vertical do segmento
        if ((point.y > v1.y) != (point.y > v2.y))
        {
            float xIntersection = v1.x + (point.y - v1.y) * (v2.x - v1.x) / (v2.y - v1.y);
            if (point.x < xIntersection)
            {
                intersections++;
            }
        }
    }

    // Retorna true se o número de interseções for ímpar (dentro do polígono)
    return intersections % 2 == 1;
}

bool isCarInsideTrack(const glm::vec2 &carPosition,
                      const std::vector<glm::vec2> &innerTrack,
                      const std::vector<glm::vec2> &outerTrack)
{
    // O carro deve estar:
    // - Fora do polígono interno
    // - Dentro do polígono externo
    return isPointInsidePolygon(carPosition, outerTrack) &&
           !isPointInsidePolygon(carPosition, innerTrack);
}

glm::vec2 closestPointOnSegment(glm::vec2 point, glm::vec2 segmentStart, glm::vec2 segmentEnd)
{
    // Vetor do segmento
    glm::vec2 segment = segmentEnd - segmentStart;

    // Projeta o ponto no segmento
    float t = glm::dot(point - segmentStart, segment) / glm::dot(segment, segment);

    // Clampa t entre 0 e 1 para garantir que a projeção esteja dentro do segmento
    t = glm::clamp(t, 0.0f, 1.0f);

    // Calcula o ponto mais próximo no segmento
    return segmentStart + t * segment;
}

glm::vec2 projectCarOnTrack(glm::vec2 carroPosicao, const std::vector<glm::vec2> &track)
{
    glm::vec2 projection;
    float minDistance = std::numeric_limits<float>::max();

    // Percorre os pontos da pista
    for (size_t i = 0; i < track.size() - 1; ++i)
    {
        // Segmento atual da pista
        glm::vec2 p1 = track[i];
        glm::vec2 p2 = track[i + 1];

        // Vetor do segmento
        glm::vec2 segment = p2 - p1;

        // Projeta a posição do carro no segmento da pista
        float t = glm::dot(carroPosicao - p1, segment) / glm::dot(segment, segment);
        t = glm::clamp(t, 0.0f, 1.0f);

        glm::vec2 projectedPoint = p1 + t * segment;

        // Calcula a distância ao ponto projetado
        float distance = glm::length(projectedPoint - carroPosicao);

        // Atualiza se a distância for menor
        if (distance < minDistance)
        {
            minDistance = distance;
            projection = projectedPoint;
        }
    }

    return projection;
}

glm::vec2 correctCarPosition(glm::vec2 carroPosicao, const std::vector<glm::vec2> &innerTrack, const std::vector<glm::vec2> &outerTrack)
{
    // Projeta o carro na pista interna e externa
    glm::vec2 posicaoInner = projectCarOnTrack(carroPosicao, innerTrack);
    glm::vec2 posicaoOuter = projectCarOnTrack(carroPosicao, outerTrack);

    // Calcula os vetores de diferença
    glm::vec2 vectorToInner = posicaoInner - carroPosicao;
    glm::vec2 vectorToOuter = posicaoOuter - carroPosicao;

    // Verifica qual vetor é menor e usa isso para corrigir a posição
    if (glm::length(vectorToInner) < glm::length(vectorToOuter))
    {
        return posicaoInner;
    }
    else
    {
        return posicaoOuter;
    }
}

unsigned int setupVAO(const float *vertices, size_t size)
{
    unsigned int VAO, VBO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);

    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, size, vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void *)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void *)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    return VAO;
}

// Função para carregar e configurar texturas
unsigned int loadTexture(const char *path, GLenum textureFormat = GL_RGB)
{
    unsigned int textureID;
    glGenTextures(1, &textureID);
    glBindTexture(GL_TEXTURE_2D, textureID);

    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

    int width, height, nrChannels;
    stbi_set_flip_vertically_on_load(true);
    unsigned char *data = stbi_load(path, &width, &height, &nrChannels, 0);

    if (data)
    {
        glTexImage2D(GL_TEXTURE_2D, 0, textureFormat, width, height, 0, textureFormat, GL_UNSIGNED_BYTE, data);
        glGenerateMipmap(GL_TEXTURE_2D);
    }
    else
    {
        std::cout << "Failed to load texture: " << path << std::endl;
    }
    stbi_image_free(data);

    return textureID;
}

GLFWwindow* initGLFW(int width, int height) {
    // Inicializar o GLFW
    if (!glfwInit()) {
        std::cerr << "Failed to initialize GLFW" << std::endl;
        return nullptr;
    }

    // Configurar o GLFW
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // Necessário para MacOS, desabilitar para Windows
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    #ifdef __APPLE__
        glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    #endif

    // Criar a janela
    GLFWwindow *window = glfwCreateWindow(width, height, "Coordenadas OpenGL : Cubo", NULL, NULL);
    if (!window) {
        std::cerr << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return nullptr;
    }

    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // Carregar as funções do OpenGL com GLAD
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cerr << "Failed to initialize GLAD" << std::endl;
        return nullptr;
    }

    // Habilitar o teste de profundidade
    glEnable(GL_DEPTH_TEST);

    return window;
}

int main()
{
    // Inicializar GLFW e OpenGL
    GLFWwindow* window = initGLFW(SCR_WIDTH, SCR_HEIGHT);
    if (!window) {
        return -1;
    }

    unsigned int VAOcarro = setupVAO(carroVertices, sizeof(carroVertices));
    unsigned int arcoVAO = setupVAO(arcoVertices, sizeof(arcoVertices));
    unsigned int floorVAO = setupVAO(floorVertices, sizeof(floorVertices));
    unsigned int cubeVAO = setupVAO(cubeVertices, sizeof(cubeVertices));

    Shader shader1("vertex.glsl", "fragment.glsl");
    Shader shaderVermelho("vertex.glsl", "fragment_vermelho.glsl");
    Shader lightingShader("phong_lighting.vs", "phong_lighting.fs");
    Shader lightCubeShader("light_cube.vs", "light_cube.fs");
    // Carregar texturas
    unsigned int texture1 = loadTexture("res/images/cinza.jpg", GL_RGB);
    unsigned int texture2 = loadTexture("res/images/Chao2.png", GL_RGBA);
    unsigned int texture3 = loadTexture("res/images/Pare.png", GL_RGBA);
    unsigned int texture4 = loadTexture("res/images/PareVerso.png", GL_RGBA);

    // Associar as texturas aos slots do shader
    shader1.use();
    shader1.setInt("texture1", 0);
    shader1.setInt("texture2", 1);
    lightingShader.setInt("texture1", 0);

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------
        // glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // also clear the depth buffer now!


        glm::mat4 modelLuz = glm::mat4(1.0f);
        // Demonstra o problema da distorção do vetor normal
        //model = glm::scale(model, glm::vec3(0.5f, 0.2f, 3.0f)); // transformação de escala não linear
        lightingShader.setMat4("model", modelLuz);
        glm::vec3 lightPos = luzBasePosicao;
        float specularStrength = 0.1;
        lightingShader.use();
        lightingShader.setVec3("objectColor", 1.0f, 1.0f, 1.0f);
        lightingShader.setVec3("lightColor",  1.0f, 1.0f, 1.0f);
        lightingShader.setVec3("lightPos", lightPos);
        lightingShader.setVec3("viewPos", cameraPos);
        lightingShader.setFloat("specularStrength",specularStrength);


        // Camera
        float yawRadians = glm::radians(-45.0);
        cameraFront.x = cos(yawRadians);
        cameraFront.z = sin(yawRadians);
        cameraFront = glm::normalize(cameraFront);
        glm::mat4 view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
        view = glm::rotate(view, glm::radians(15.0f), glm::vec3(1.0f, 0.0f, 1.0f));
        glm::mat4 projection = glm::mat4(1.0f);
        projection = glm::perspective(glm::radians(45.0f), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);
        lightingShader.setMat4("projection", projection);
        lightingShader.setMat4("view", view);

        // Chão
        //shader1.use();
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture2);
        glm::mat4 modelFloor = glm::mat4(1.0f);
        modelFloor = glm::translate(modelFloor, glm::vec3(0.0f, -1.0f, 0.0f)); // Desloca o chão pra baixo
        lightingShader.setMat4("model", modelFloor);
        glBindVertexArray(floorVAO);
        glDrawArrays(GL_TRIANGLES, 0, 6);

        // Carro
        shaderVermelho.use();
        glm::mat4 modelCarro = glm::mat4(1.0f);
        modelCarro = glm::translate(modelCarro, carroPosicao);
        modelCarro = glm::scale(modelCarro, glm::vec3(0.5f, 0.5f, 0.5f));
        modelCarro = glm::rotate(modelCarro, glm::radians(carroRotacao), glm::vec3(0.0f, 1.0f, 0.0f));
        glm::vec2 carroPosicao2 = glm::vec2(carroPosicao.x, carroPosicao.z);

        if (!isCarInsideTrack(carroPosicao2, innerTrack, outerTrack))
        {
            glm::vec2 carroPosicaoAjustado = correctCarPosition(carroPosicao, innerTrack, outerTrack);
            carroPosicao = glm::mix(carroPosicao, glm::vec3(carroPosicaoAjustado.x, -1.5f, carroPosicaoAjustado.y), 0.05f);
        }

        std::cout << "Posição: " << carroPosicao.x << " | " << carroPosicao.z;
        std::cout << "\nRotação: " << carroRotacao << " graus" << std::endl
                  << "\n";

        glBindVertexArray(VAOcarro);
        glDrawArrays(GL_TRIANGLES, 0, 1000);
        glBindVertexArray(0);
        shaderVermelho.setMat4("model", modelCarro);
        shaderVermelho.setMat4("view", view);
        shaderVermelho.setMat4("projection", projection);

        shader1.use();
        // Placa 1 (placa)
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture3);
        glBindVertexArray(cubeVAO);
        glm::mat4 modelPlaca1 = glm::mat4(1.0f);
        modelPlaca1 = glm::translate(modelPlaca1, glm::vec3(-4.0f, 1.5f, 11.5f));
        modelPlaca1 = glm::scale(modelPlaca1, glm::vec3(0.01f, 1.2f, 1.2f));
        modelPlaca1 = glm::rotate(modelPlaca1, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
        shader1.setMat4("model", modelPlaca1);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);
        // Placa 1 (base)
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture1);
        glBindVertexArray(cubeVAO);
        glm::mat4 modelBase1 = glm::mat4(1.0f);
        modelBase1 = glm::translate(modelBase1, glm::vec3(-3.9f, 0.0f, 11.5f));
        modelBase1 = glm::scale(modelBase1, glm::vec3(0.15f, 2.5f, 0.15f));
        modelBase1 = glm::rotate(modelBase1, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
        shader1.setMat4("model", modelBase1);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);

        // Placa 2 (placa)
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture4);
        glBindVertexArray(cubeVAO);
        glm::mat4 modelPlaca2 = glm::mat4(1.0f);
        modelPlaca2 = glm::translate(modelPlaca2, glm::vec3(-4.0f, 1.5f, -9.7f));
        modelPlaca2 = glm::scale(modelPlaca2, glm::vec3(0.01f, 1.2f, 1.2f));
        modelPlaca2 = glm::rotate(modelPlaca2, glm::radians(-90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
        shader1.setMat4("model", modelPlaca2);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);
        // Placa 2 (base)
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture1);
        glBindVertexArray(cubeVAO);
        glm::mat4 modelBase2 = glm::mat4(1.0f);
        modelBase2 = glm::translate(modelBase2, glm::vec3(-4.1f, 0.0f, -9.7f));
        modelBase2 = glm::scale(modelBase2, glm::vec3(0.15f, 2.5f, 0.15f));
        modelBase2 = glm::rotate(modelBase2, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
        shader1.setMat4("model", modelBase2);
        glDrawArrays(GL_TRIANGLES, 0, 36);
        glBindVertexArray(0);

        // Arco
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture1);
        glBindVertexArray(arcoVAO);
        glm::mat4 modelArco = glm::mat4(1.0f);
        modelArco = glm::translate(modelArco, glm::vec3(2.0f, -1.5f, 13.0f));
        modelArco = glm::scale(modelArco, glm::vec3(0.50f, 0.60f, 0.70f));
        modelArco = glm::rotate(modelArco, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
        shader1.setMat4("model", modelArco);
        glDrawArrays(GL_TRIANGLES, 0, 1000);
        glBindVertexArray(0);

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);
        glfwPollEvents();

        // retrieve the matrix uniform locations
        unsigned int modelLoc = glGetUniformLocation(shader1.ID, "model");
        unsigned int viewLoc = glGetUniformLocation(shader1.ID, "view");
        // pass them to the shaders (3 different ways)
        glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(modelCarro));
        glUniformMatrix4fv(viewLoc, 1, GL_FALSE, &view[0][0]);
        // note: currently we set the projection matrix each frame, but since the projection matrix rarely changes it's often best practice to set it outside the main loop only once.
        shader1.setMat4("projection", projection);
    }

    glDeleteVertexArrays(1, &VAOcarro);
    // glDeleteBuffers(1, &VBOcarro);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow *window)
{
    // Rotação do carro
    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
    {
        carroRotacao += 2.0f; // Rotaciona para a esquerda
    }
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
    {
        carroRotacao -= 2.0f; // Rotaciona para a direita
    }

    // Converte o ângulo para radianos
    float anguloRad = glm::radians(carroRotacao);

    // Direção do movimento baseado na rotação
    glm::vec3 direcaoFrente = glm::vec3(sin(anguloRad), 0.0f, cos(anguloRad));

    // Movimentação para frente ou para trás
    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
    {
        carroPosicao += velocidadeCarro * direcaoFrente;
    }
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
    {
        carroPosicao -= velocidadeCarro * direcaoFrente;
    }

    // Normaliza a rotação para mantê-la dentro do intervalo [0, 360)
    if (carroRotacao >= 360.0f)
        carroRotacao -= 360.0f;
    if (carroRotacao < 0.0f)
        carroRotacao += 360.0f;

    if (!permitirMovimentacao)
        return; // Bloqueia a movimentação da câmera (do carro continua)

    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);

    const float cameraSpeed = 0.5f;
    // ajustar de acordo com a velocidade do computador
    if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS)
        cameraPos += cameraSpeed * cameraFront;
    if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS)
        cameraPos -= cameraSpeed * cameraFront;
    if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)
        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow *window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}