// #include <GL/glew.h>
// #include <GLFW/glfw3.h>
#include <vector>
#include <glad/glad.h>
#include "opengl_utils.cpp"
#include "vendor/stb_image.h"
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <Shader.h>
#include <iostream>

std::vector<glm::vec2> innerTrack = {
    glm::vec2(-21.895924f,  4.255136f),
    glm::vec2(-23.444775f,  2.930795f),
    glm::vec2(-24.072124f,  0.041898f),
    glm::vec2(-24.004322f,  1.687562f),
    glm::vec2(-0.158652f,   4.255136f),
    glm::vec2( 21.578621f,  4.255136f),
    glm::vec2( 23.606468f,  3.176087f),
    glm::vec2( 24.345722f,  0.041898f),
    glm::vec2( 24.155762f,  1.687562f),
    glm::vec2(-21.895924f, -4.306566f),
    glm::vec2(-23.444775f, -3.092296f),
    glm::vec2(-24.004322f, -1.603768f),
    glm::vec2(-0.158652f , -4.306566f),
    glm::vec2( 21.578621f, -4.306566f),
    glm::vec2( 23.606468f, -3.092296f),
    glm::vec2( 24.155762f, -1.603768f)
};

std::vector<glm::vec2> outerTrack = {
    glm::vec2(-26.710827f, -0.027053f),
    glm::vec2(-23.845669f,  1.618612f),
    glm::vec2(-21.737272f, -10.136620f),
    glm::vec2( 23.765121f, -10.157049f),
    glm::vec2(-21.737272f,  4.186187f),
    glm::vec2(-23.286123f,  2.861845f),
    glm::vec2(-23.913471f, -0.027053f),
    glm::vec2(-23.845669f,  1.618612f),
    glm::vec2( 0.000000f ,  4.186187f),
    glm::vec2( 21.737272f,  4.186187f),
    glm::vec2( 23.765121f,  3.107139f),
    glm::vec2( 24.504374f, -0.027053f),
    glm::vec2( 24.314415f,  1.618612f),
    glm::vec2(-21.737272f, -4.375515f),
    glm::vec2(-23.286123f, -3.161244f),
    glm::vec2(-23.845669f, -1.672718f),
    glm::vec2( 0.000000f , -4.375515f),
    glm::vec2( 21.737272f, -4.375515f),
    glm::vec2( 23.765121f, -3.161244f),
    glm::vec2( 24.314415f, -1.672718f),
    glm::vec2( 28.283169f,  27.498846f),
    glm::vec2( 25.867556f,  32.462799f),
    glm::vec2( 24.659750f,  33.336132f),
    glm::vec2( 23.451944f,  13.393888f),
    glm::vec2( 24.659750f,  13.711636f),
    glm::vec2( 27.679266f,  17.401869f),
    glm::vec2(-28.594751f,  3.974433f),
    glm::vec2(-28.915689f, -0.000528f),
    glm::vec2(-21.735682f,  10.109038f),
    glm::vec2(-23.763529f,  10.129468f),
    glm::vec2(-26.179140f,  8.938385f),
    glm::vec2(-27.386946f,  7.423243f),
    glm::vec2(-24.971334f,  9.811720f),
    glm::vec2(-27.990850f,  6.121488f),
    glm::vec2( 0.001592f ,  10.109038f),
    glm::vec2( 28.597937f,  3.974433f),
    glm::vec2( 28.918875f, -0.000528f),
    glm::vec2( 21.738867f,  10.109038f),
    glm::vec2( 23.766714f,  10.129468f),
    glm::vec2( 26.182325f,  8.938385f),
    glm::vec2( 27.390135f,  7.423243f),
    glm::vec2( 24.974516f,  9.811720f),
    glm::vec2( 27.994032f,  6.121488f),
    glm::vec2(-28.594751f, -3.975490f),
    glm::vec2(-21.735682f, -10.110096f),
    glm::vec2(-23.763529f, -10.130526f),
    glm::vec2(-26.179140f, -8.939442f),
    glm::vec2(-27.386946f, -7.424301f),
    glm::vec2(-24.971334f, -9.812778f),
    glm::vec2(-27.990850f, -6.122545f),
    glm::vec2( 0.001592f ,  -10.110096f),
    glm::vec2( 28.597937f,  -3.975490f),
    glm::vec2( 21.738867f,  -10.110096f),
    glm::vec2( 23.766714f,  -10.130526f),
    glm::vec2( 26.182325f,  -8.939442f),
    glm::vec2( 27.390135f,  -7.424301f),
    glm::vec2( 24.974516f,  -9.812778f),
    glm::vec2( 27.994032f,  -6.122545f)
};

float carroVertices[] = {
    1.3f, 1.0f, -0.5f, 0.875f, 0.5f,
    2.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    2.3f, 1.0f, -0.5f, 0.625f, 0.5f,
    2.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    1.3f, 0.0f, 0.5f, 0.375f, 1.0f,
    2.3f, 0.0f, 0.5f, 0.375f, 0.75f,
    1.3f, 1.0f, 0.5f, 0.625f, 0.0f,
    1.3f, -0.0f, -0.5f, 0.375f, 0.25f,
    1.3f, 0.0f, 0.5f, 0.375f, 0.0f,
    2.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    1.3f, 0.0f, 0.5f, 0.125f, 0.75f,
    1.3f, -0.0f, -0.5f, 0.125f, 0.5f,
    2.3f, 1.0f, -0.5f, 0.625f, 0.5f,
    2.3f, 0.0f, 0.5f, 0.375f, 0.75f,
    2.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    1.3f, 1.0f, -0.5f, 0.625f, 0.25f,
    2.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    1.3f, -0.0f, -0.5f, 0.375f, 0.25f,
    1.3f, 1.0f, -0.5f, 0.875f, 0.5f,
    1.3f, 1.0f, 0.5f, 0.875f, 0.75f,
    2.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    2.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    1.3f, 1.0f, 0.5f, 0.625f, 1.0f,
    1.3f, 0.0f, 0.5f, 0.375f, 1.0f,
    1.3f, 1.0f, 0.5f, 0.625f, 0.0f,
    1.3f, 1.0f, -0.5f, 0.625f, 0.25f,
    1.3f, -0.0f, -0.5f, 0.375f, 0.25f,
    2.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    2.3f, 0.0f, 0.5f, 0.375f, 0.75f,
    1.3f, 0.0f, 0.5f, 0.125f, 0.75f,
    2.3f, 1.0f, -0.5f, 0.625f, 0.5f,
    2.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    2.3f, 0.0f, 0.5f, 0.375f, 0.75f,
    1.3f, 1.0f, -0.5f, 0.625f, 0.25f,
    2.3f, 1.0f, -0.5f, 0.625f, 0.5f,
    2.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    -2.25f, 4.449999f, -6.22f, 0.875f, 0.5f,
    2.25f, 4.45f, -0.22f, 0.625f, 0.75f,
    2.25f, 4.449999f, -6.22f, 0.625f, 0.5f,
    2.25f, 4.45f, -0.22f, 0.625f, 0.75f,
    -2.25f, 3.05f, -0.22f, 0.375f, 1.0f,
    2.25f, 3.05f, -0.22f, 0.375f, 0.75f,
    -2.25f, 4.45f, -0.22f, 0.625f, 0.0f,
    -2.25f, 3.049999f, -6.22f, 0.375f, 0.25f,
    -2.25f, 3.05f, -0.22f, 0.375f, 0.0f,
    2.25f, 3.049999f, -6.22f, 0.375f, 0.5f,
    -2.25f, 3.05f, -0.22f, 0.125f, 0.75f,
    -2.25f, 3.049999f, -6.22f, 0.125f, 0.5f,
    2.25f, 4.449999f, -6.22f, 0.625f, 0.5f,
    2.25f, 3.05f, -0.22f, 0.375f, 0.75f,
    2.25f, 3.049999f, -6.22f, 0.375f, 0.5f,
    -2.25f, 4.449999f, -6.22f, 0.625f, 0.25f,
    2.25f, 3.049999f, -6.22f, 0.375f, 0.5f,
    -2.25f, 3.049999f, -6.22f, 0.375f, 0.25f,
    -2.25f, 4.449999f, -6.22f, 0.875f, 0.5f,
    -2.25f, 4.45f, -0.22f, 0.875f, 0.75f,
    2.25f, 4.45f, -0.22f, 0.625f, 0.75f,
    2.25f, 4.45f, -0.22f, 0.625f, 0.75f,
    -2.25f, 4.45f, -0.22f, 0.625f, 1.0f,
    -2.25f, 3.05f, -0.22f, 0.375f, 1.0f,
    -2.25f, 4.45f, -0.22f, 0.625f, 0.0f,
    -2.25f, 4.449999f, -6.22f, 0.625f, 0.25f,
    -2.25f, 3.049999f, -6.22f, 0.375f, 0.25f,
    2.25f, 3.049999f, -6.22f, 0.375f, 0.5f,
    2.25f, 3.05f, -0.22f, 0.375f, 0.75f,
    -2.25f, 3.05f, -0.22f, 0.125f, 0.75f,
    2.25f, 4.449999f, -6.22f, 0.625f, 0.5f,
    2.25f, 4.45f, -0.22f, 0.625f, 0.75f,
    2.25f, 3.05f, -0.22f, 0.375f, 0.75f,
    -2.25f, 4.449999f, -6.22f, 0.625f, 0.25f,
    2.25f, 4.449999f, -6.22f, 0.625f, 0.5f,
    2.25f, 3.049999f, -6.22f, 0.375f, 0.5f,
    1.3f, 1.0f, -6.5f, 0.875f, 0.5f,
    2.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    2.3f, 1.0f, -6.5f, 0.625f, 0.5f,
    2.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    1.3f, -0.0f, -5.5f, 0.375f, 1.0f,
    2.3f, -0.0f, -5.5f, 0.375f, 0.75f,
    1.3f, 1.0f, -5.5f, 0.625f, 0.0f,
    1.3f, -0.0f, -6.5f, 0.375f, 0.25f,
    1.3f, -0.0f, -5.5f, 0.375f, 0.0f,
    2.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    1.3f, -0.0f, -5.5f, 0.125f, 0.75f,
    1.3f, -0.0f, -6.5f, 0.125f, 0.5f,
    2.3f, 1.0f, -6.5f, 0.625f, 0.5f,
    2.3f, -0.0f, -5.5f, 0.375f, 0.75f,
    2.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    1.3f, 1.0f, -6.5f, 0.625f, 0.25f,
    2.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    1.3f, -0.0f, -6.5f, 0.375f, 0.25f,
    1.3f, 1.0f, -6.5f, 0.875f, 0.5f,
    1.3f, 1.0f, -5.5f, 0.875f, 0.75f,
    2.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    2.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    1.3f, 1.0f, -5.5f, 0.625f, 1.0f,
    1.3f, -0.0f, -5.5f, 0.375f, 1.0f,
    1.3f, 1.0f, -5.5f, 0.625f, 0.0f,
    1.3f, 1.0f, -6.5f, 0.625f, 0.25f,
    1.3f, -0.0f, -6.5f, 0.375f, 0.25f,
    2.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    2.3f, -0.0f, -5.5f, 0.375f, 0.75f,
    1.3f, -0.0f, -5.5f, 0.125f, 0.75f,
    2.3f, 1.0f, -6.5f, 0.625f, 0.5f,
    2.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    2.3f, -0.0f, -5.5f, 0.375f, 0.75f,
    1.3f, 1.0f, -6.5f, 0.625f, 0.25f,
    2.3f, 1.0f, -6.5f, 0.625f, 0.5f,
    2.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    -2.3f, 1.0f, -0.5f, 0.875f, 0.5f,
    -1.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    -1.3f, 1.0f, -0.5f, 0.625f, 0.5f,
    -1.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    -2.3f, 0.0f, 0.5f, 0.375f, 1.0f,
    -1.3f, 0.0f, 0.5f, 0.375f, 0.75f,
    -2.3f, 1.0f, 0.5f, 0.625f, 0.0f,
    -2.3f, -0.0f, -0.5f, 0.375f, 0.25f,
    -2.3f, 0.0f, 0.5f, 0.375f, 0.0f,
    -1.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    -2.3f, 0.0f, 0.5f, 0.125f, 0.75f,
    -2.3f, -0.0f, -0.5f, 0.125f, 0.5f,
    -1.3f, 1.0f, -0.5f, 0.625f, 0.5f,
    -1.3f, 0.0f, 0.5f, 0.375f, 0.75f,
    -1.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    -2.3f, 1.0f, -0.5f, 0.625f, 0.25f,
    -1.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    -2.3f, -0.0f, -0.5f, 0.375f, 0.25f,
    -2.3f, 1.0f, -0.5f, 0.875f, 0.5f,
    -2.3f, 1.0f, 0.5f, 0.875f, 0.75f,
    -1.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    -1.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    -2.3f, 1.0f, 0.5f, 0.625f, 1.0f,
    -2.3f, 0.0f, 0.5f, 0.375f, 1.0f,
    -2.3f, 1.0f, 0.5f, 0.625f, 0.0f,
    -2.3f, 1.0f, -0.5f, 0.625f, 0.25f,
    -2.3f, -0.0f, -0.5f, 0.375f, 0.25f,
    -1.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    -1.3f, 0.0f, 0.5f, 0.375f, 0.75f,
    -2.3f, 0.0f, 0.5f, 0.125f, 0.75f,
    -1.3f, 1.0f, -0.5f, 0.625f, 0.5f,
    -1.3f, 1.0f, 0.5f, 0.625f, 0.75f,
    -1.3f, 0.0f, 0.5f, 0.375f, 0.75f,
    -2.3f, 1.0f, -0.5f, 0.625f, 0.25f,
    -1.3f, 1.0f, -0.5f, 0.625f, 0.5f,
    -1.3f, -0.0f, -0.5f, 0.375f, 0.5f,
    -2.3f, 1.0f, -6.5f, 0.875f, 0.5f,
    -1.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    -1.3f, 1.0f, -6.5f, 0.625f, 0.5f,
    -1.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    -2.3f, -0.0f, -5.5f, 0.375f, 1.0f,
    -1.3f, -0.0f, -5.5f, 0.375f, 0.75f,
    -2.3f, 1.0f, -5.5f, 0.625f, 0.0f,
    -2.3f, -0.0f, -6.5f, 0.375f, 0.25f,
    -2.3f, -0.0f, -5.5f, 0.375f, 0.0f,
    -1.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    -2.3f, -0.0f, -5.5f, 0.125f, 0.75f,
    -2.3f, -0.0f, -6.5f, 0.125f, 0.5f,
    -1.3f, 1.0f, -6.5f, 0.625f, 0.5f,
    -1.3f, -0.0f, -5.5f, 0.375f, 0.75f,
    -1.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    -2.3f, 1.0f, -6.5f, 0.625f, 0.25f,
    -1.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    -2.3f, -0.0f, -6.5f, 0.375f, 0.25f,
    -2.3f, 1.0f, -6.5f, 0.875f, 0.5f,
    -2.3f, 1.0f, -5.5f, 0.875f, 0.75f,
    -1.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    -1.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    -2.3f, 1.0f, -5.5f, 0.625f, 1.0f,
    -2.3f, -0.0f, -5.5f, 0.375f, 1.0f,
    -2.3f, 1.0f, -5.5f, 0.625f, 0.0f,
    -2.3f, 1.0f, -6.5f, 0.625f, 0.25f,
    -2.3f, -0.0f, -6.5f, 0.375f, 0.25f,
    -1.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    -1.3f, -0.0f, -5.5f, 0.375f, 0.75f,
    -2.3f, -0.0f, -5.5f, 0.125f, 0.75f,
    -1.3f, 1.0f, -6.5f, 0.625f, 0.5f,
    -1.3f, 1.0f, -5.5f, 0.625f, 0.75f,
    -1.3f, -0.0f, -5.5f, 0.375f, 0.75f,
    -2.3f, 1.0f, -6.5f, 0.625f, 0.25f,
    -1.3f, 1.0f, -6.5f, 0.625f, 0.5f,
    -1.3f, -0.0f, -6.5f, 0.375f, 0.5f,
    -2.5f, 3.0f, -7.0f, 0.875f, 0.5f,
    2.5f, 3.0f, 1.0f, 0.625f, 0.75f,
    2.5f, 3.0f, -7.0f, 0.625f, 0.5f,
    2.5f, 3.0f, 1.0f, 0.625f, 0.75f,
    -2.5f, 1.0f, 1.0f, 0.375f, 1.0f,
    2.5f, 1.0f, 1.0f, 0.375f, 0.75f,
    -2.5f, 3.0f, 1.0f, 0.625f, 0.0f,
    -2.5f, 0.999999f, -7.0f, 0.375f, 0.25f,
    -2.5f, 1.0f, 1.0f, 0.375f, 0.0f,
    2.5f, 0.999999f, -7.0f, 0.375f, 0.5f,
    -2.5f, 1.0f, 1.0f, 0.125f, 0.75f,
    -2.5f, 0.999999f, -7.0f, 0.125f, 0.5f,
    2.5f, 3.0f, -7.0f, 0.625f, 0.5f,
    2.5f, 1.0f, 1.0f, 0.375f, 0.75f,
    2.5f, 0.999999f, -7.0f, 0.375f, 0.5f,
    -2.5f, 3.0f, -7.0f, 0.625f, 0.25f,
    2.5f, 0.999999f, -7.0f, 0.375f, 0.5f,
    -2.5f, 0.999999f, -7.0f, 0.375f, 0.25f,
    -2.5f, 3.0f, -7.0f, 0.875f, 0.5f,
    -2.5f, 3.0f, 1.0f, 0.875f, 0.75f,
    2.5f, 3.0f, 1.0f, 0.625f, 0.75f,
    2.5f, 3.0f, 1.0f, 0.625f, 0.75f,
    -2.5f, 3.0f, 1.0f, 0.625f, 1.0f,
    -2.5f, 1.0f, 1.0f, 0.375f, 1.0f,
    -2.5f, 3.0f, 1.0f, 0.625f, 0.0f,
    -2.5f, 3.0f, -7.0f, 0.625f, 0.25f,
    -2.5f, 0.999999f, -7.0f, 0.375f, 0.25f,
    2.5f, 0.999999f, -7.0f, 0.375f, 0.5f,
    2.5f, 1.0f, 1.0f, 0.375f, 0.75f,
    -2.5f, 1.0f, 1.0f, 0.125f, 0.75f,
    2.5f, 3.0f, -7.0f, 0.625f, 0.5f,
    2.5f, 3.0f, 1.0f, 0.625f, 0.75f,
    2.5f, 1.0f, 1.0f, 0.375f, 0.75f,
    -2.5f, 3.0f, -7.0f, 0.625f, 0.25f,
    2.5f, 3.0f, -7.0f, 0.625f, 0.5f,
    2.5f, 0.999999f, -7.0f, 0.375f, 0.5f
};

float placaVertices[] = {
    0.0f, 5.47798f, -0.11137f, 1.0f, 1.0f,
    0.02222f, 0.0f, -0.10919f, 0.96875f, 0.5f,
    0.0f, 0.0f, -0.11137f, 1.0f, 0.5f,
    0.02222f, 5.47798f, -0.10919f, 0.96875f, 1.0f,
    0.04358f, 0.0f, -0.1027f, 0.9375f, 0.5f,
    0.02222f, 0.0f, -0.10919f, 0.96875f, 0.5f,
    0.04358f, 5.47798f, -0.1027f, 0.9375f, 1.0f,
    0.06327f, 0.0f, -0.09218f, 0.90625f, 0.5f,
    0.04358f, 0.0f, -0.1027f, 0.9375f, 0.5f,
    0.06327f, 5.47798f, -0.09218f, 0.90625f, 1.0f,
    0.08053f, 0.0f, -0.07802f, 0.875f, 0.5f,
    0.06327f, 0.0f, -0.09218f, 0.90625f, 0.5f,
    0.08053f, 5.47798f, -0.07802f, 0.875f, 1.0f,
    0.09469f, 0.0f, -0.06076f, 0.84375f, 0.5f,
    0.08053f, 0.0f, -0.07802f, 0.875f, 0.5f,
    0.09469f, 5.47798f, -0.06076f, 0.84375f, 1.0f,
    0.10521f, 0.0f, -0.04107f, 0.8125f, 0.5f,
    0.09469f, 0.0f, -0.06076f, 0.84375f, 0.5f,
    0.10521f, 5.47798f, -0.04107f, 0.8125f, 1.0f,
    0.11169f, 0.0f, -0.01971f, 0.78125f, 0.5f,
    0.10521f, 0.0f, -0.04107f, 0.8125f, 0.5f,
    0.11169f, 5.47798f, -0.01971f, 0.78125f, 1.0f,
    0.11388f, 0.0f, 0.00251f, 0.75f, 0.5f,
    0.11169f, 0.0f, -0.01971f, 0.78125f, 0.5f,
    0.11388f, 5.47798f, 0.00251f, 0.75f, 1.0f,
    0.11169f, 0.0f, 0.02473f, 0.71875f, 0.5f,
    0.11388f, 0.0f, 0.00251f, 0.75f, 0.5f,
    0.11169f, 5.47798f, 0.02473f, 0.71875f, 1.0f,
    0.10521f, 0.0f, 0.04609f, 0.6875f, 0.5f,
    0.11169f, 0.0f, 0.02473f, 0.71875f, 0.5f,
    0.10521f, 5.47798f, 0.04609f, 0.6875f, 1.0f,
    0.09469f, 0.0f, 0.06578f, 0.65625f, 0.5f,
    0.10521f, 0.0f, 0.04609f, 0.6875f, 0.5f,
    0.09469f, 5.47798f, 0.06578f, 0.65625f, 1.0f,
    0.08053f, 0.0f, 0.08303f, 0.625f, 0.5f,
    0.09469f, 0.0f, 0.06578f, 0.65625f, 0.5f,
    0.08053f, 5.47798f, 0.08303f, 0.625f, 1.0f,
    0.06327f, 0.0f, 0.0972f, 0.59375f, 0.5f,
    0.08053f, 0.0f, 0.08303f, 0.625f, 0.5f,
    0.06327f, 5.47798f, 0.0972f, 0.59375f, 1.0f,
    0.04358f, 0.0f, 0.10772f, 0.5625f, 0.5f,
    0.06327f, 0.0f, 0.0972f, 0.59375f, 0.5f,
    0.04358f, 5.47798f, 0.10772f, 0.5625f, 1.0f,
    0.02222f, 0.0f, 0.1142f, 0.53125f, 0.5f,
    0.04358f, 0.0f, 0.10772f, 0.5625f, 0.5f,
    0.02222f, 5.47798f, 0.1142f, 0.53125f, 1.0f,
    0.0f, 0.0f, 0.11639f, 0.5f, 0.5f,
    0.02222f, 0.0f, 0.1142f, 0.53125f, 0.5f,
    0.0f, 5.47798f, 0.11639f, 0.5f, 1.0f,
    -0.02222f, 0.0f, 0.1142f, 0.46875f, 0.5f,
    0.0f, 0.0f, 0.11639f, 0.5f, 0.5f,
    -0.02222f, 5.47798f, 0.1142f, 0.46875f, 1.0f,
    -0.04358f, 0.0f, 0.10772f, 0.4375f, 0.5f,
    -0.02222f, 0.0f, 0.1142f, 0.46875f, 0.5f,
    -0.04358f, 5.47798f, 0.10772f, 0.4375f, 1.0f,
    -0.06327f, 0.0f, 0.0972f, 0.40625f, 0.5f,
    -0.04358f, 0.0f, 0.10772f, 0.4375f, 0.5f,
    -0.06327f, 5.47798f, 0.0972f, 0.40625f, 1.0f,
    -0.08053f, 0.0f, 0.08303f, 0.375f, 0.5f,
    -0.06327f, 0.0f, 0.0972f, 0.40625f, 0.5f,
    -0.08053f, 5.47798f, 0.08303f, 0.375f, 1.0f,
    -0.09469f, 0.0f, 0.06578f, 0.34375f, 0.5f,
    -0.08053f, 0.0f, 0.08303f, 0.375f, 0.5f,
    -0.09469f, 5.47798f, 0.06578f, 0.34375f, 1.0f,
    -0.10521f, 0.0f, 0.04609f, 0.3125f, 0.5f,
    -0.09469f, 0.0f, 0.06578f, 0.34375f, 0.5f,
    -0.10521f, 5.47798f, 0.04609f, 0.3125f, 1.0f,
    -0.11169f, 0.0f, 0.02473f, 0.28125f, 0.5f,
    -0.10521f, 0.0f, 0.04609f, 0.3125f, 0.5f,
    -0.11169f, 5.47798f, 0.02473f, 0.28125f, 1.0f,
    -0.11388f, 0.0f, 0.00251f, 0.25f, 0.5f,
    -0.11169f, 0.0f, 0.02473f, 0.28125f, 0.5f,
    -0.11388f, 5.47798f, 0.00251f, 0.25f, 1.0f,
    -0.11169f, 0.0f, -0.01971f, 0.21875f, 0.5f,
    -0.11388f, 0.0f, 0.00251f, 0.25f, 0.5f,
    -0.11169f, 5.47798f, -0.01971f, 0.21875f, 1.0f,
    -0.10521f, 0.0f, -0.04107f, 0.1875f, 0.5f,
    -0.11169f, 0.0f, -0.01971f, 0.21875f, 0.5f,
    -0.10521f, 5.47798f, -0.04107f, 0.1875f, 1.0f,
    -0.09469f, 0.0f, -0.06076f, 0.15625f, 0.5f,
    -0.10521f, 0.0f, -0.04107f, 0.1875f, 0.5f,
    -0.09469f, 5.47798f, -0.06076f, 0.15625f, 1.0f,
    -0.08053f, 0.0f, -0.07802f, 0.125f, 0.5f,
    -0.09469f, 0.0f, -0.06076f, 0.15625f, 0.5f,
    -0.08053f, 5.47798f, -0.07802f, 0.125f, 1.0f,
    -0.06327f, 0.0f, -0.09218f, 0.09375f, 0.5f,
    -0.08053f, 0.0f, -0.07802f, 0.125f, 0.5f,
    -0.06327f, 5.47798f, -0.09218f, 0.09375f, 1.0f,
    -0.04358f, 0.0f, -0.1027f, 0.0625f, 0.5f,
    -0.06327f, 0.0f, -0.09218f, 0.09375f, 0.5f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    -0.04358f, 5.47798f, -0.1027f, 0.0625f, 1.0f,
    -0.02222f, 0.0f, -0.10919f, 0.03125f, 0.5f,
    -0.04358f, 0.0f, -0.1027f, 0.0625f, 0.5f,
    -0.02222f, 5.47798f, -0.10919f, 0.03125f, 1.0f,
    0.0f, 0.0f, -0.11137f, 0.0f, 0.5f,
    -0.02222f, 0.0f, -0.10919f, 0.03125f, 0.5f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.0f, 5.47798f, -0.11137f, 1.0f, 1.0f,
    0.02222f, 5.47798f, -0.10919f, 0.96875f, 1.0f,
    0.02222f, 0.0f, -0.10919f, 0.96875f, 0.5f,
    0.02222f, 5.47798f, -0.10919f, 0.96875f, 1.0f,
    0.04358f, 5.47798f, -0.1027f, 0.9375f, 1.0f,
    0.04358f, 0.0f, -0.1027f, 0.9375f, 0.5f,
    0.04358f, 5.47798f, -0.1027f, 0.9375f, 1.0f,
    0.06327f, 5.47798f, -0.09218f, 0.90625f, 1.0f,
    0.06327f, 0.0f, -0.09218f, 0.90625f, 0.5f,
    0.06327f, 5.47798f, -0.09218f, 0.90625f, 1.0f,
    0.08053f, 5.47798f, -0.07802f, 0.875f, 1.0f,
    0.08053f, 0.0f, -0.07802f, 0.875f, 0.5f,
    0.08053f, 5.47798f, -0.07802f, 0.875f, 1.0f,
    0.09469f, 5.47798f, -0.06076f, 0.84375f, 1.0f,
    0.09469f, 0.0f, -0.06076f, 0.84375f, 0.5f,
    0.09469f, 5.47798f, -0.06076f, 0.84375f, 1.0f,
    0.10521f, 5.47798f, -0.04107f, 0.8125f, 1.0f,
    0.10521f, 0.0f, -0.04107f, 0.8125f, 0.5f,
    0.10521f, 5.47798f, -0.04107f, 0.8125f, 1.0f,
    0.11169f, 5.47798f, -0.01971f, 0.78125f, 1.0f,
    0.11169f, 0.0f, -0.01971f, 0.78125f, 0.5f,
    0.11169f, 5.47798f, -0.01971f, 0.78125f, 1.0f,
    0.11388f, 5.47798f, 0.00251f, 0.75f, 1.0f,
    0.11388f, 0.0f, 0.00251f, 0.75f, 0.5f,
    0.11388f, 5.47798f, 0.00251f, 0.75f, 1.0f,
    0.11169f, 5.47798f, 0.02473f, 0.71875f, 1.0f,
    0.11169f, 0.0f, 0.02473f, 0.71875f, 0.5f,
    0.11169f, 5.47798f, 0.02473f, 0.71875f, 1.0f,
    0.10521f, 5.47798f, 0.04609f, 0.6875f, 1.0f,
    0.10521f, 0.0f, 0.04609f, 0.6875f, 0.5f,
    0.10521f, 5.47798f, 0.04609f, 0.6875f, 1.0f,
    0.09469f, 5.47798f, 0.06578f, 0.65625f, 1.0f,
    0.09469f, 0.0f, 0.06578f, 0.65625f, 0.5f,
    0.09469f, 5.47798f, 0.06578f, 0.65625f, 1.0f,
    0.08053f, 5.47798f, 0.08303f, 0.625f, 1.0f,
    0.08053f, 0.0f, 0.08303f, 0.625f, 0.5f,
    0.08053f, 5.47798f, 0.08303f, 0.625f, 1.0f,
    0.06327f, 5.47798f, 0.0972f, 0.59375f, 1.0f,
    0.06327f, 0.0f, 0.0972f, 0.59375f, 0.5f,
    0.06327f, 5.47798f, 0.0972f, 0.59375f, 1.0f,
    0.04358f, 5.47798f, 0.10772f, 0.5625f, 1.0f,
    0.04358f, 0.0f, 0.10772f, 0.5625f, 0.5f,
    0.04358f, 5.47798f, 0.10772f, 0.5625f, 1.0f,
    0.02222f, 5.47798f, 0.1142f, 0.53125f, 1.0f,
    0.02222f, 0.0f, 0.1142f, 0.53125f, 0.5f,
    0.02222f, 5.47798f, 0.1142f, 0.53125f, 1.0f,
    0.0f, 5.47798f, 0.11639f, 0.5f, 1.0f,
    0.0f, 0.0f, 0.11639f, 0.5f, 0.5f,
    0.0f, 5.47798f, 0.11639f, 0.5f, 1.0f,
    -0.02222f, 5.47798f, 0.1142f, 0.46875f, 1.0f,
    -0.02222f, 0.0f, 0.1142f, 0.46875f, 0.5f,
    -0.02222f, 5.47798f, 0.1142f, 0.46875f, 1.0f,
    -0.04358f, 5.47798f, 0.10772f, 0.4375f, 1.0f,
    -0.04358f, 0.0f, 0.10772f, 0.4375f, 0.5f,
    -0.04358f, 5.47798f, 0.10772f, 0.4375f, 1.0f,
    -0.06327f, 5.47798f, 0.0972f, 0.40625f, 1.0f,
    -0.06327f, 0.0f, 0.0972f, 0.40625f, 0.5f,
    -0.06327f, 5.47798f, 0.0972f, 0.40625f, 1.0f,
    -0.08053f, 5.47798f, 0.08303f, 0.375f, 1.0f,
    -0.08053f, 0.0f, 0.08303f, 0.375f, 0.5f,
    -0.08053f, 5.47798f, 0.08303f, 0.375f, 1.0f,
    -0.09469f, 5.47798f, 0.06578f, 0.34375f, 1.0f,
    -0.09469f, 0.0f, 0.06578f, 0.34375f, 0.5f,
    -0.09469f, 5.47798f, 0.06578f, 0.34375f, 1.0f,
    -0.10521f, 5.47798f, 0.04609f, 0.3125f, 1.0f,
    -0.10521f, 0.0f, 0.04609f, 0.3125f, 0.5f,
    -0.10521f, 5.47798f, 0.04609f, 0.3125f, 1.0f,
    -0.11169f, 5.47798f, 0.02473f, 0.28125f, 1.0f,
    -0.11169f, 0.0f, 0.02473f, 0.28125f, 0.5f,
    -0.11169f, 5.47798f, 0.02473f, 0.28125f, 1.0f,
    -0.11388f, 5.47798f, 0.00251f, 0.25f, 1.0f,
    -0.11388f, 0.0f, 0.00251f, 0.25f, 0.5f,
    -0.11388f, 5.47798f, 0.00251f, 0.25f, 1.0f,
    -0.11169f, 5.47798f, -0.01971f, 0.21875f, 1.0f,
    -0.11169f, 0.0f, -0.01971f, 0.21875f, 0.5f,
    -0.11169f, 5.47798f, -0.01971f, 0.21875f, 1.0f,
    -0.10521f, 5.47798f, -0.04107f, 0.1875f, 1.0f,
    -0.10521f, 0.0f, -0.04107f, 0.1875f, 0.5f,
    -0.10521f, 5.47798f, -0.04107f, 0.1875f, 1.0f,
    -0.09469f, 5.47798f, -0.06076f, 0.15625f, 1.0f,
    -0.09469f, 0.0f, -0.06076f, 0.15625f, 0.5f,
    -0.09469f, 5.47798f, -0.06076f, 0.15625f, 1.0f,
    -0.08053f, 5.47798f, -0.07802f, 0.125f, 1.0f,
    -0.08053f, 0.0f, -0.07802f, 0.125f, 0.5f,
    -0.08053f, 5.47798f, -0.07802f, 0.125f, 1.0f,
    -0.06327f, 5.47798f, -0.09218f, 0.09375f, 1.0f,
    -0.06327f, 0.0f, -0.09218f, 0.09375f, 0.5f,
    -0.06327f, 5.47798f, -0.09218f, 0.09375f, 1.0f,
    -0.04358f, 5.47798f, -0.1027f, 0.0625f, 1.0f,
    -0.04358f, 0.0f, -0.1027f, 0.0625f, 0.5f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.02222f, 5.47798f, -0.10919f, 0.29682f, 0.48539f,
    0.0f, 5.47798f, -0.11137f, 0.25f, 0.49f,
    0.0f, 5.47798f, -0.11137f, 0.25f, 0.49f,
    -0.02222f, 5.47798f, -0.10919f, 0.20318f, 0.48539f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.06327f, 5.47798f, -0.09218f, 0.11666f, 0.44955f,
    -0.08053f, 5.47798f, -0.07802f, 0.08029f, 0.41971f,
    -0.08053f, 5.47798f, -0.07802f, 0.08029f, 0.41971f,
    -0.09469f, 5.47798f, -0.06076f, 0.05045f, 0.38334f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.11169f, 5.47798f, -0.01971f, 0.01461f, 0.29682f,
    -0.11388f, 5.47798f, 0.00251f, 0.01f, 0.25f,
    -0.11388f, 5.47798f, 0.00251f, 0.01f, 0.25f,
    -0.11169f, 5.47798f, 0.02473f, 0.01461f, 0.20318f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.09469f, 5.47798f, 0.06578f, 0.05045f, 0.11666f,
    -0.08053f, 5.47798f, 0.08303f, 0.08029f, 0.08029f,
    -0.08053f, 5.47798f, 0.08303f, 0.08029f, 0.08029f,
    -0.06327f, 5.47798f, 0.0972f, 0.11666f, 0.05045f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.02222f, 5.47798f, 0.1142f, 0.20318f, 0.01461f,
    0.0f, 5.47798f, 0.11639f, 0.25f, 0.01f,
    0.0f, 5.47798f, 0.11639f, 0.25f, 0.01f,
    0.02222f, 5.47798f, 0.1142f, 0.29682f, 0.01461f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.06327f, 5.47798f, 0.0972f, 0.38334f, 0.05045f,
    0.08053f, 5.47798f, 0.08303f, 0.41971f, 0.08029f,
    0.08053f, 5.47798f, 0.08303f, 0.41971f, 0.08029f,
    0.09469f, 5.47798f, 0.06578f, 0.44955f, 0.11666f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.11169f, 5.47798f, 0.02473f, 0.48539f, 0.20318f,
    0.11388f, 5.47798f, 0.00251f, 0.49f, 0.25f,
    0.11388f, 5.47798f, 0.00251f, 0.49f, 0.25f,
    0.11169f, 5.47798f, -0.01971f, 0.48539f, 0.29682f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.09469f, 5.47798f, -0.06076f, 0.44955f, 0.38334f,
    0.08053f, 5.47798f, -0.07802f, 0.41971f, 0.41971f,
    0.08053f, 5.47798f, -0.07802f, 0.41971f, 0.41971f,
    0.06327f, 5.47798f, -0.09218f, 0.38334f, 0.44955f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.0f, 5.47798f, -0.11137f, 0.25f, 0.49f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.08053f, 5.47798f, -0.07802f, 0.08029f, 0.41971f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.11388f, 5.47798f, 0.00251f, 0.01f, 0.25f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.08053f, 5.47798f, 0.08303f, 0.08029f, 0.08029f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    0.0f, 5.47798f, 0.11639f, 0.25f, 0.01f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.08053f, 5.47798f, 0.08303f, 0.41971f, 0.08029f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.11388f, 5.47798f, 0.00251f, 0.49f, 0.25f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.08053f, 5.47798f, -0.07802f, 0.41971f, 0.41971f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    -0.04358f, 5.47798f, -0.1027f, 0.15816f, 0.47173f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.10521f, 5.47798f, 0.04609f, 0.02827f, 0.15816f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    0.04358f, 5.47798f, 0.10772f, 0.34184f, 0.02827f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.10521f, 5.47798f, 0.04609f, 0.47173f, 0.15816f,
    0.10521f, 5.47798f, -0.04107f, 0.47173f, 0.34184f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    0.04358f, 5.47798f, -0.1027f, 0.34184f, 0.47173f,
    -0.10521f, 5.47798f, -0.04107f, 0.02827f, 0.34184f,
    -0.04358f, 5.47798f, 0.10772f, 0.15816f, 0.02827f,
    -0.04358f, 5.47798f, -0.1027f, 0.0625f, 1.0f,
    -0.02222f, 5.47798f, -0.10919f, 0.03125f, 1.0f,
    -0.02222f, 0.0f, -0.10919f, 0.03125f, 0.5f,
    -0.02222f, 5.47798f, -0.10919f, 0.03125f, 1.0f,
    0.0f, 5.47798f, -0.11137f, 0.0f, 1.0f,
    0.0f, 0.0f, -0.11137f, 0.0f, 0.5f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.0f, 0.0f, -0.11137f, 0.75f, 0.49f,
    0.02222f, 0.0f, -0.10919f, 0.79682f, 0.48539f,
    0.02222f, 0.0f, -0.10919f, 0.79682f, 0.48539f,
    0.04358f, 0.0f, -0.1027f, 0.84184f, 0.47173f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.08053f, 0.0f, -0.07802f, 0.91971f, 0.41971f,
    0.09469f, 0.0f, -0.06076f, 0.94955f, 0.38334f,
    0.09469f, 0.0f, -0.06076f, 0.94955f, 0.38334f,
    0.10521f, 0.0f, -0.04107f, 0.97173f, 0.34184f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11388f, 0.0f, 0.00251f, 0.99f, 0.25f,
    0.11169f, 0.0f, 0.02473f, 0.98539f, 0.20318f,
    0.11169f, 0.0f, 0.02473f, 0.98539f, 0.20318f,
    0.10521f, 0.0f, 0.04609f, 0.97173f, 0.15816f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.08053f, 0.0f, 0.08303f, 0.91971f, 0.08029f,
    0.06327f, 0.0f, 0.0972f, 0.88334f, 0.05045f,
    0.06327f, 0.0f, 0.0972f, 0.88334f, 0.05045f,
    0.04358f, 0.0f, 0.10772f, 0.84184f, 0.02827f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    0.0f, 0.0f, 0.11639f, 0.75f, 0.01f,
    -0.02222f, 0.0f, 0.1142f, 0.70318f, 0.01461f,
    -0.02222f, 0.0f, 0.1142f, 0.70318f, 0.01461f,
    -0.04358f, 0.0f, 0.10772f, 0.65816f, 0.02827f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.08053f, 0.0f, 0.08303f, 0.58029f, 0.08029f,
    -0.09469f, 0.0f, 0.06578f, 0.55045f, 0.11666f,
    -0.09469f, 0.0f, 0.06578f, 0.55045f, 0.11666f,
    -0.10521f, 0.0f, 0.04609f, 0.52827f, 0.15816f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11388f, 0.0f, 0.00251f, 0.51f, 0.25f,
    -0.11169f, 0.0f, -0.01971f, 0.51461f, 0.29682f,
    -0.11169f, 0.0f, -0.01971f, 0.51461f, 0.29682f,
    -0.10521f, 0.0f, -0.04107f, 0.52827f, 0.34184f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.08053f, 0.0f, -0.07802f, 0.58029f, 0.41971f,
    -0.06327f, 0.0f, -0.09218f, 0.61666f, 0.44955f,
    -0.06327f, 0.0f, -0.09218f, 0.61666f, 0.44955f,
    -0.04358f, 0.0f, -0.1027f, 0.65816f, 0.47173f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.02222f, 0.0f, -0.10919f, 0.79682f, 0.48539f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.09469f, 0.0f, -0.06076f, 0.94955f, 0.38334f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11169f, 0.0f, 0.02473f, 0.98539f, 0.20318f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.06327f, 0.0f, 0.0972f, 0.88334f, 0.05045f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    -0.02222f, 0.0f, 0.1142f, 0.70318f, 0.01461f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.09469f, 0.0f, 0.06578f, 0.55045f, 0.11666f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11169f, 0.0f, -0.01971f, 0.51461f, 0.29682f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.06327f, 0.0f, -0.09218f, 0.61666f, 0.44955f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.06327f, 0.0f, -0.09218f, 0.88334f, 0.44955f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.09469f, 0.0f, 0.06578f, 0.94955f, 0.11666f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    -0.06327f, 0.0f, 0.0972f, 0.61666f, 0.05045f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.11169f, 0.0f, 0.02473f, 0.51461f, 0.20318f,
    -0.09469f, 0.0f, -0.06076f, 0.55045f, 0.38334f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    -0.02222f, 0.0f, -0.10919f, 0.70318f, 0.48539f,
    0.11169f, 0.0f, -0.01971f, 0.98539f, 0.29682f,
    0.02222f, 0.0f, 0.1142f, 0.79682f, 0.01461f,
    -1.05782f, 3.78637f, -0.31016f, 0.625f, 0.0f,
    1.05782f, 3.78637f, -0.08984f, 0.375f, 0.25f,
    -1.05782f, 3.78637f, -0.08984f, 0.375f, 0.0f,
    1.05782f, 3.78637f, -0.31016f, 0.625f, 0.25f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    1.05782f, 3.78637f, -0.08984f, 0.375f, 0.25f,
    1.05782f, 5.90201f, -0.31016f, 0.625f, 0.5f,
    -1.05782f, 5.90201f, -0.08984f, 0.375f, 0.75f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f,
    -1.05782f, 3.78637f, -0.08984f, 0.375f, 1.0f,
    -1.05782f, 5.90201f, -0.08984f, 0.375f, 0.75f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    -1.05782f, 3.78637f, -0.08984f, 0.125f, 0.75f,
    1.05782f, 3.78637f, -0.08984f, 0.125f, 0.5f,
    1.05782f, 3.78637f, -0.31016f, 0.875f, 0.5f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f,
    1.05782f, 5.90201f, -0.31016f, 0.625f, 0.5f,
    -1.05782f, 3.78637f, -0.31016f, 0.625f, 0.0f,
    1.05782f, 3.78637f, -0.31016f, 0.625f, 0.25f,
    1.05782f, 3.78637f, -0.08984f, 0.375f, 0.25f,
    1.05782f, 3.78637f, -0.31016f, 0.625f, 0.25f,
    1.05782f, 5.90201f, -0.31016f, 0.625f, 0.5f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    1.05782f, 5.90201f, -0.31016f, 0.625f, 0.5f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f,
    -1.05782f, 5.90201f, -0.08984f, 0.375f, 0.75f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f,
    -1.05782f, 3.78637f, -0.31016f, 0.625f, 1.0f,
    -1.05782f, 3.78637f, -0.08984f, 0.375f, 1.0f,
    1.05782f, 5.90201f, -0.08984f, 0.375f, 0.5f,
    -1.05782f, 5.90201f, -0.08984f, 0.375f, 0.75f,
    -1.05782f, 3.78637f, -0.08984f, 0.125f, 0.75f,
    1.05782f, 3.78637f, -0.31016f, 0.875f, 0.5f,
    -1.05782f, 3.78637f, -0.31016f, 0.875f, 0.75f,
    -1.05782f, 5.90201f, -0.31016f, 0.625f, 0.75f
};

float coneVertices[] = {
    -2.373f, 0.095096f, 0.622869f, 0.625f, 0.0f,
    -2.373f, -0.020666f, -0.622869f, 0.375f, 0.25f,
    -2.373f, -0.020666f, 0.622869f, 0.375f, 0.0f,
    -2.373f, 0.095096f, -0.622869f, 0.625f, 0.25f,
    -1.127f, -0.020666f, -0.622869f, 0.375f, 0.5f,
    -2.373f, -0.020666f, -0.622869f, 0.375f, 0.25f,
    -1.127f, 0.095096f, -0.622869f, 0.625f, 0.5f,
    -1.127f, -0.020666f, 0.622869f, 0.375f, 0.75f,
    -1.127f, -0.020666f, -0.622869f, 0.375f, 0.5f,
    -1.127f, 0.095096f, 0.622869f, 0.625f, 0.75f,
    -2.373f, -0.020666f, 0.622869f, 0.375f, 1.0f,
    -1.127f, -0.020666f, 0.622869f, 0.375f, 0.75f,
    -1.127f, -0.020666f, -0.622869f, 0.375f, 0.5f,
    -2.373f, -0.020666f, 0.622869f, 0.125f, 0.75f,
    -2.373f, -0.020666f, -0.622869f, 0.125f, 0.5f,
    -2.373f, 0.095096f, -0.622869f, 0.875f, 0.5f,
    -1.127f, 0.095096f, 0.622869f, 0.625f, 0.75f,
    -1.127f, 0.095096f, -0.622869f, 0.625f, 0.5f,
    -2.373f, 0.095096f, 0.622869f, 0.625f, 0.0f,
    -2.373f, 0.095096f, -0.622869f, 0.625f, 0.25f,
    -2.373f, -0.020666f, -0.622869f, 0.375f, 0.25f,
    -2.373f, 0.095096f, -0.622869f, 0.625f, 0.25f,
    -1.127f, 0.095096f, -0.622869f, 0.625f, 0.5f,
    -1.127f, -0.020666f, -0.622869f, 0.375f, 0.5f,
    -1.127f, 0.095096f, -0.622869f, 0.625f, 0.5f,
    -1.127f, 0.095096f, 0.622869f, 0.625f, 0.75f,
    -1.127f, -0.020666f, 0.622869f, 0.375f, 0.75f,
    -1.127f, 0.095096f, 0.622869f, 0.625f, 0.75f,
    -2.373f, 0.095096f, 0.622869f, 0.625f, 1.0f,
    -2.373f, -0.020666f, 0.622869f, 0.375f, 1.0f,
    -1.127f, -0.020666f, -0.622869f, 0.375f, 0.5f,
    -1.127f, -0.020666f, 0.622869f, 0.375f, 0.75f,
    -2.373f, -0.020666f, 0.622869f, 0.125f, 0.75f,
    -2.373f, 0.095096f, -0.622869f, 0.875f, 0.5f,
    -2.373f, 0.095096f, 0.622869f, 0.875f, 0.75f,
    -1.127f, 0.095096f, 0.622869f, 0.625f, 0.75f,
    -1.75f, 0.095096f, -0.555286f, 0.25f, 0.49f,
    -1.736f, 1.481391f, -0.072775f, 0.256257f, 0.281454f,
    -1.642f, 0.095096f, -0.544616f, 0.296822f, 0.485388f,
    -1.736f, 1.481391f, -0.072775f, 0.256257f, 0.281454f,
    -1.538f, 0.095096f, -0.513017f, 0.341844f, 0.471731f,
    -1.642f, 0.095096f, -0.544616f, 0.296822f, 0.485388f,
    -1.722f, 1.481391f, -0.068553f, 0.262273f, 0.279629f,
    -1.442f, 0.095096f, -0.461703f, 0.383337f, 0.449553f,
    -1.538f, 0.095096f, -0.513017f, 0.341844f, 0.471731f,
    -1.709f, 1.481391f, -0.061696f, 0.267817f, 0.276666f,
    -1.357f, 0.095096f, -0.392646f, 0.419706f, 0.419706f,
    -1.442f, 0.095096f, -0.461703f, 0.383337f, 0.449553f,
    -1.357f, 0.095096f, -0.392646f, 0.419706f, 0.419706f,
    -1.688f, 1.481391f, -0.041224f, 0.276666f, 0.267817f,
    -1.288f, 0.095096f, -0.3085f, 0.449553f, 0.383337f,
    -1.688f, 1.481391f, -0.041224f, 0.276666f, 0.267817f,
    -1.237f, 0.095096f, -0.212499f, 0.471731f, 0.341844f,
    -1.288f, 0.095096f, -0.3085f, 0.449553f, 0.383337f,
    -1.681f, 1.481391f, -0.028395f, 0.279629f, 0.262273f,
    -1.205f, 0.095096f, -0.108331f, 0.485388f, 0.296822f,
    -1.237f, 0.095096f, -0.212499f, 0.471731f, 0.341844f,
    -1.205f, 0.095096f, -0.108331f, 0.485388f, 0.296822f,
    -1.676f, 1.481391f, -0.0f, 0.28207f, 0.25f,
    -1.195f, 0.095096f, 0.0f, 0.49f, 0.25f,
    -1.676f, 1.481391f, -0.0f, 0.28207f, 0.25f,
    -1.205f, 0.095096f, 0.108331f, 0.485388f, 0.203178f,
    -1.195f, 0.095096f, 0.0f, 0.49f, 0.25f,
    -1.205f, 0.095096f, 0.108331f, 0.485388f, 0.203178f,
    -1.681f, 1.481391f, 0.028395f, 0.279629f, 0.237727f,
    -1.237f, 0.095096f, 0.212499f, 0.471731f, 0.158156f,
    -1.237f, 0.095096f, 0.212499f, 0.471731f, 0.158156f,
    -1.688f, 1.481391f, 0.041224f, 0.276666f, 0.232183f,
    -1.288f, 0.095096f, 0.3085f, 0.449553f, 0.116663f,
    -1.688f, 1.481391f, 0.041224f, 0.276666f, 0.232183f,
    -1.357f, 0.095096f, 0.392646f, 0.419706f, 0.080294f,
    -1.288f, 0.095096f, 0.3085f, 0.449553f, 0.116663f,
    -1.698f, 1.481391f, 0.052468f, 0.272677f, 0.227323f,
    -1.442f, 0.095096f, 0.461703f, 0.383337f, 0.050447f,
    -1.357f, 0.095096f, 0.392646f, 0.419706f, 0.080294f,
    -1.709f, 1.481391f, 0.061696f, 0.267817f, 0.223334f,
    -1.538f, 0.095096f, 0.513017f, 0.341844f, 0.028269f,
    -1.442f, 0.095096f, 0.461703f, 0.383337f, 0.050447f,
    -1.722f, 1.481391f, 0.068553f, 0.262273f, 0.220371f,
    -1.642f, 0.095096f, 0.544616f, 0.296822f, 0.014612f,
    -1.538f, 0.095096f, 0.513017f, 0.341844f, 0.028269f,
    -1.736f, 1.481391f, 0.072775f, 0.256257f, 0.218546f,
    -1.75f, 1.481391f, 0.074201f, 0.25f, 0.21793f,
    -1.75f, 0.095096f, 0.555286f, 0.25f, 0.01f,
    -1.75f, 1.481391f, 0.074201f, 0.25f, 0.21793f,
    -1.858f, 0.095096f, 0.544616f, 0.203178f, 0.014612f,
    -1.75f, 0.095096f, 0.555286f, 0.25f, 0.01f,
    -1.764f, 1.481391f, 0.072775f, 0.243743f, 0.218546f,
    -1.962f, 0.095096f, 0.513017f, 0.158156f, 0.028269f,
    -1.858f, 0.095096f, 0.544616f, 0.203178f, 0.014612f,
    -1.778f, 1.481391f, 0.068553f, 0.237727f, 0.220371f,
    -2.058f, 0.095096f, 0.461703f, 0.116663f, 0.050447f,
    -1.962f, 0.095096f, 0.513017f, 0.158156f, 0.028269f,
    -1.791f, 1.481391f, 0.061696f, 0.232183f, 0.223334f,
    -2.143f, 0.095096f, 0.392646f, 0.080294f, 0.080294f,
    -2.058f, 0.095096f, 0.461703f, 0.116663f, 0.050447f,
    -2.143f, 0.095096f, 0.392646f, 0.080294f, 0.080294f,
    -1.812f, 1.481391f, 0.041224f, 0.223334f, 0.232183f,
    -2.212f, 0.095096f, 0.3085f, 0.050447f, 0.116663f,
    -1.812f, 1.481391f, 0.041224f, 0.223334f, 0.232183f,
    -2.263f, 0.095096f, 0.212499f, 0.028269f, 0.158156f,
    -2.212f, 0.095096f, 0.3085f, 0.050447f, 0.116663f,
    -1.819f, 1.481391f, 0.028395f, 0.220371f, 0.237727f,
    -2.295f, 0.095096f, 0.108331f, 0.014612f, 0.203178f,
    -2.263f, 0.095096f, 0.212499f, 0.028269f, 0.158156f,
    -1.823f, 1.481391f, 0.014476f, 0.218546f, 0.243743f,
    -1.824f, 1.481391f, 0.000693f, 0.217959f, 0.249701f,
    -2.305f, 0.095096f, 0.0f, 0.01f, 0.25f,
    -1.824f, 1.481391f, -0.0f, 0.21793f, 0.25f,
    -2.295f, 0.095096f, -0.108331f, 0.014612f, 0.296822f,
    -2.305f, 0.095096f, 0.0f, 0.01f, 0.25f,
    -2.295f, 0.095096f, -0.108331f, 0.014612f, 0.296822f,
    -1.819f, 1.481391f, -0.028395f, 0.220371f, 0.262273f,
    -2.263f, 0.095096f, -0.212499f, 0.028269f, 0.341844f,
    -2.263f, 0.095096f, -0.212499f, 0.028269f, 0.341844f,
    -1.812f, 1.481391f, -0.041224f, 0.223334f, 0.267817f,
    -2.212f, 0.095096f, -0.3085f, 0.050447f, 0.383337f,
    -1.812f, 1.481391f, -0.041224f, 0.223334f, 0.267817f,
    -2.143f, 0.095096f, -0.392646f, 0.080294f, 0.419706f,
    -2.212f, 0.095096f, -0.3085f, 0.050447f, 0.383337f,
    -2.143f, 0.095096f, -0.392646f, 0.080294f, 0.419706f,
    -1.791f, 1.481391f, -0.061696f, 0.232183f, 0.276666f,
    -2.058f, 0.095096f, -0.461703f, 0.116663f, 0.449553f,
    -2.058f, 0.095096f, -0.461703f, 0.116663f, 0.449553f,
    -1.778f, 1.481391f, -0.068553f, 0.237727f, 0.279629f,
    -1.962f, 0.095096f, -0.513017f, 0.158156f, 0.471731f,
    -1.642f, 0.095096f, 0.544616f, 0.796822f, 0.014612f,
    -2.295f, 0.095096f, 0.108331f, 0.514612f, 0.203178f,
    -1.858f, 0.095096f, -0.544616f, 0.703178f, 0.485388f,
    -1.778f, 1.481391f, -0.068553f, 0.237727f, 0.279629f,
    -1.858f, 0.095096f, -0.544616f, 0.203178f, 0.485388f,
    -1.962f, 0.095096f, -0.513017f, 0.158156f, 0.471731f,
    -1.858f, 0.095096f, -0.544616f, 0.203178f, 0.485388f,
    -1.75f, 1.481391f, -0.074201f, 0.25f, 0.28207f,
    -1.75f, 0.095096f, -0.555286f, 0.25f, 0.49f,
    -1.722f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.681f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.778f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.819f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.778f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.75f, 1.481391f, 0.074201f, 0.0f, 0.0f,
    -1.75f, 0.095096f, -0.555286f, 0.25f, 0.49f,
    -1.75f, 1.481391f, -0.074201f, 0.25f, 0.28207f,
    -1.736f, 1.481391f, -0.072775f, 0.256257f, 0.281454f,
    -1.736f, 1.481391f, -0.072775f, 0.256257f, 0.281454f,
    -1.722f, 1.481391f, -0.068553f, 0.262273f, 0.279629f,
    -1.538f, 0.095096f, -0.513017f, 0.341844f, 0.471731f,
    -1.722f, 1.481391f, -0.068553f, 0.262273f, 0.279629f,
    -1.709f, 1.481391f, -0.061696f, 0.267817f, 0.276666f,
    -1.442f, 0.095096f, -0.461703f, 0.383337f, 0.449553f,
    -1.709f, 1.481391f, -0.061696f, 0.267817f, 0.276666f,
    -1.698f, 1.481391f, -0.052468f, 0.272677f, 0.272677f,
    -1.357f, 0.095096f, -0.392646f, 0.419706f, 0.419706f,
    -1.357f, 0.095096f, -0.392646f, 0.419706f, 0.419706f,
    -1.698f, 1.481391f, -0.052468f, 0.272677f, 0.272677f,
    -1.688f, 1.481391f, -0.041224f, 0.276666f, 0.267817f,
    -1.688f, 1.481391f, -0.041224f, 0.276666f, 0.267817f,
    -1.681f, 1.481391f, -0.028395f, 0.279629f, 0.262273f,
    -1.237f, 0.095096f, -0.212499f, 0.471731f, 0.341844f,
    -1.681f, 1.481391f, -0.028395f, 0.279629f, 0.262273f,
    -1.677f, 1.481391f, -0.014476f, 0.281454f, 0.256257f,
    -1.205f, 0.095096f, -0.108331f, 0.485388f, 0.296822f,
    -1.205f, 0.095096f, -0.108331f, 0.485388f, 0.296822f,
    -1.677f, 1.481391f, -0.014476f, 0.281454f, 0.256257f,
    -1.676f, 1.481391f, -0.0f, 0.28207f, 0.25f,
    -1.676f, 1.481391f, -0.0f, 0.28207f, 0.25f,
    -1.677f, 1.481391f, 0.014476f, 0.281454f, 0.243743f,
    -1.205f, 0.095096f, 0.108331f, 0.485388f, 0.203178f,
    -1.205f, 0.095096f, 0.108331f, 0.485388f, 0.203178f,
    -1.677f, 1.481391f, 0.014476f, 0.281454f, 0.243743f,
    -1.681f, 1.481391f, 0.028395f, 0.279629f, 0.237727f,
    -1.237f, 0.095096f, 0.212499f, 0.471731f, 0.158156f,
    -1.681f, 1.481391f, 0.028395f, 0.279629f, 0.237727f,
    -1.688f, 1.481391f, 0.041224f, 0.276666f, 0.232183f,
    -1.688f, 1.481391f, 0.041224f, 0.276666f, 0.232183f,
    -1.698f, 1.481391f, 0.052468f, 0.272677f, 0.227323f,
    -1.357f, 0.095096f, 0.392646f, 0.419706f, 0.080294f,
    -1.698f, 1.481391f, 0.052468f, 0.272677f, 0.227323f,
    -1.709f, 1.481391f, 0.061696f, 0.267817f, 0.223334f,
    -1.442f, 0.095096f, 0.461703f, 0.383337f, 0.050447f,
    -1.709f, 1.481391f, 0.061696f, 0.267817f, 0.223334f,
    -1.722f, 1.481391f, 0.068553f, 0.262273f, 0.220371f,
    -1.538f, 0.095096f, 0.513017f, 0.341844f, 0.028269f,
    -1.722f, 1.481391f, 0.068553f, 0.262273f, 0.220371f,
    -1.736f, 1.481391f, 0.072775f, 0.256257f, 0.218546f,
    -1.642f, 0.095096f, 0.544616f, 0.296822f, 0.014612f,
    -1.75f, 0.095096f, 0.555286f, 0.25f, 0.01f,
    -1.642f, 0.095096f, 0.544616f, 0.296822f, 0.014612f,
    -1.736f, 1.481391f, 0.072775f, 0.256257f, 0.218546f,
    -1.736f, 1.481391f, 0.072775f, 0.256257f, 0.218546f,
    -1.745f, 1.481391f, 0.073704f, 0.252182f, 0.218145f,
    -1.75f, 1.481391f, 0.074201f, 0.25f, 0.21793f,
    -1.75f, 1.481391f, 0.074201f, 0.25f, 0.21793f,
    -1.764f, 1.481391f, 0.072775f, 0.243743f, 0.218546f,
    -1.858f, 0.095096f, 0.544616f, 0.203178f, 0.014612f,
    -1.764f, 1.481391f, 0.072775f, 0.243743f, 0.218546f,
    -1.778f, 1.481391f, 0.068553f, 0.237727f, 0.220371f,
    -1.962f, 0.095096f, 0.513017f, 0.158156f, 0.028269f,
    -1.778f, 1.481391f, 0.068553f, 0.237727f, 0.220371f,
    -1.791f, 1.481391f, 0.061696f, 0.232183f, 0.223334f,
    -2.058f, 0.095096f, 0.461703f, 0.116663f, 0.050447f,
    -1.791f, 1.481391f, 0.061696f, 0.232183f, 0.223334f,
    -1.802f, 1.481391f, 0.052468f, 0.227323f, 0.227323f,
    -2.143f, 0.095096f, 0.392646f, 0.080294f, 0.080294f,
    -2.143f, 0.095096f, 0.392646f, 0.080294f, 0.080294f,
    -1.802f, 1.481391f, 0.052468f, 0.227323f, 0.227323f,
    -1.812f, 1.481391f, 0.041224f, 0.223334f, 0.232183f,
    -1.812f, 1.481391f, 0.041224f, 0.223334f, 0.232183f,
    -1.819f, 1.481391f, 0.028395f, 0.220371f, 0.237727f,
    -2.263f, 0.095096f, 0.212499f, 0.028269f, 0.158156f,
    -1.819f, 1.481391f, 0.028395f, 0.220371f, 0.237727f,
    -1.823f, 1.481391f, 0.014476f, 0.218546f, 0.243743f,
    -2.295f, 0.095096f, 0.108331f, 0.014612f, 0.203178f,
    -2.305f, 0.095096f, 0.0f, 0.01f, 0.25f,
    -2.295f, 0.095096f, 0.108331f, 0.014612f, 0.203178f,
    -1.823f, 1.481391f, 0.014476f, 0.218546f, 0.243743f,
    -1.824f, 1.481391f, 0.000693f, 0.217959f, 0.249701f,
    -1.824f, 1.481391f, -0.0f, 0.21793f, 0.25f,
    -2.305f, 0.095096f, 0.0f, 0.01f, 0.25f,
    -1.824f, 1.481391f, -0.0f, 0.21793f, 0.25f,
    -1.823f, 1.481391f, -0.014476f, 0.218546f, 0.256257f,
    -2.295f, 0.095096f, -0.108331f, 0.014612f, 0.296822f,
    -2.295f, 0.095096f, -0.108331f, 0.014612f, 0.296822f,
    -1.823f, 1.481391f, -0.014476f, 0.218546f, 0.256257f,
    -1.819f, 1.481391f, -0.028395f, 0.220371f, 0.262273f,
    -2.263f, 0.095096f, -0.212499f, 0.028269f, 0.341844f,
    -1.819f, 1.481391f, -0.028395f, 0.220371f, 0.262273f,
    -1.812f, 1.481391f, -0.041224f, 0.223334f, 0.267817f,
    -1.812f, 1.481391f, -0.041224f, 0.223334f, 0.267817f,
    -1.802f, 1.481391f, -0.052468f, 0.227323f, 0.272677f,
    -2.143f, 0.095096f, -0.392646f, 0.080294f, 0.419706f,
    -2.143f, 0.095096f, -0.392646f, 0.080294f, 0.419706f,
    -1.802f, 1.481391f, -0.052468f, 0.227323f, 0.272677f,
    -1.791f, 1.481391f, -0.061696f, 0.232183f, 0.276666f,
    -2.058f, 0.095096f, -0.461703f, 0.116663f, 0.449553f,
    -1.791f, 1.481391f, -0.061696f, 0.232183f, 0.276666f,
    -1.778f, 1.481391f, -0.068553f, 0.237727f, 0.279629f,
    -1.858f, 0.095096f, -0.544616f, 0.703178f, 0.485388f,
    -1.75f, 0.095096f, -0.555286f, 0.75f, 0.49f,
    -1.642f, 0.095096f, -0.544616f, 0.796822f, 0.485388f,
    -1.642f, 0.095096f, -0.544616f, 0.796822f, 0.485388f,
    -1.538f, 0.095096f, -0.513017f, 0.841844f, 0.471731f,
    -1.442f, 0.095096f, -0.461703f, 0.883337f, 0.449553f,
    -1.442f, 0.095096f, -0.461703f, 0.883337f, 0.449553f,
    -1.357f, 0.095096f, -0.392646f, 0.919706f, 0.419706f,
    -1.288f, 0.095096f, -0.3085f, 0.949553f, 0.383337f,
    -1.288f, 0.095096f, -0.3085f, 0.949553f, 0.383337f,
    -1.237f, 0.095096f, -0.212499f, 0.971731f, 0.341844f,
    -1.205f, 0.095096f, -0.108331f, 0.985388f, 0.296822f,
    -1.205f, 0.095096f, -0.108331f, 0.985388f, 0.296822f,
    -1.195f, 0.095096f, 0.0f, 0.99f, 0.25f,
    -1.205f, 0.095096f, 0.108331f, 0.985388f, 0.203178f,
    -1.205f, 0.095096f, 0.108331f, 0.985388f, 0.203178f,
    -1.237f, 0.095096f, 0.212499f, 0.971731f, 0.158156f,
    -1.288f, 0.095096f, 0.3085f, 0.949553f, 0.116663f,
    -1.288f, 0.095096f, 0.3085f, 0.949553f, 0.116663f,
    -1.357f, 0.095096f, 0.392646f, 0.919706f, 0.080294f,
    -1.442f, 0.095096f, 0.461703f, 0.883337f, 0.050447f,
    -1.442f, 0.095096f, 0.461703f, 0.883337f, 0.050447f,
    -1.538f, 0.095096f, 0.513017f, 0.841844f, 0.028269f,
    -1.642f, 0.095096f, 0.544616f, 0.796822f, 0.014612f,
    -1.642f, 0.095096f, 0.544616f, 0.796822f, 0.014612f,
    -1.75f, 0.095096f, 0.555286f, 0.75f, 0.01f,
    -1.858f, 0.095096f, 0.544616f, 0.703178f, 0.014612f,
    -1.858f, 0.095096f, 0.544616f, 0.703178f, 0.014612f,
    -1.962f, 0.095096f, 0.513017f, 0.658156f, 0.028269f,
    -2.058f, 0.095096f, 0.461703f, 0.616663f, 0.050447f,
    -2.058f, 0.095096f, 0.461703f, 0.616663f, 0.050447f,
    -2.143f, 0.095096f, 0.392646f, 0.580294f, 0.080294f,
    -2.212f, 0.095096f, 0.3085f, 0.550447f, 0.116663f,
    -2.212f, 0.095096f, 0.3085f, 0.550447f, 0.116663f,
    -2.263f, 0.095096f, 0.212499f, 0.528269f, 0.158156f,
    -2.295f, 0.095096f, 0.108331f, 0.514612f, 0.203178f,
    -2.295f, 0.095096f, 0.108331f, 0.514612f, 0.203178f,
    -2.305f, 0.095096f, 0.0f, 0.51f, 0.25f,
    -2.295f, 0.095096f, -0.108331f, 0.514612f, 0.296822f,
    -2.295f, 0.095096f, -0.108331f, 0.514612f, 0.296822f,
    -2.263f, 0.095096f, -0.212499f, 0.528269f, 0.341844f,
    -2.212f, 0.095096f, -0.3085f, 0.550447f, 0.383337f,
    -2.212f, 0.095096f, -0.3085f, 0.550447f, 0.383337f,
    -2.143f, 0.095096f, -0.392646f, 0.580294f, 0.419706f,
    -2.058f, 0.095096f, -0.461703f, 0.616663f, 0.449553f,
    -2.058f, 0.095096f, -0.461703f, 0.616663f, 0.449553f,
    -1.962f, 0.095096f, -0.513017f, 0.658156f, 0.471731f,
    -1.858f, 0.095096f, -0.544616f, 0.703178f, 0.485388f,
    -1.858f, 0.095096f, -0.544616f, 0.703178f, 0.485388f,
    -1.642f, 0.095096f, -0.544616f, 0.796822f, 0.485388f,
    -1.442f, 0.095096f, -0.461703f, 0.883337f, 0.449553f,
    -1.442f, 0.095096f, -0.461703f, 0.883337f, 0.449553f,
    -1.288f, 0.095096f, -0.3085f, 0.949553f, 0.383337f,
    -1.205f, 0.095096f, -0.108331f, 0.985388f, 0.296822f,
    -1.205f, 0.095096f, -0.108331f, 0.985388f, 0.296822f,
    -1.205f, 0.095096f, 0.108331f, 0.985388f, 0.203178f,
    -1.288f, 0.095096f, 0.3085f, 0.949553f, 0.116663f,
    -1.288f, 0.095096f, 0.3085f, 0.949553f, 0.116663f,
    -1.442f, 0.095096f, 0.461703f, 0.883337f, 0.050447f,
    -1.642f, 0.095096f, 0.544616f, 0.796822f, 0.014612f,
    -1.642f, 0.095096f, 0.544616f, 0.796822f, 0.014612f,
    -1.858f, 0.095096f, 0.544616f, 0.703178f, 0.014612f,
    -2.058f, 0.095096f, 0.461703f, 0.616663f, 0.050447f,
    -2.058f, 0.095096f, 0.461703f, 0.616663f, 0.050447f,
    -2.212f, 0.095096f, 0.3085f, 0.550447f, 0.116663f,
    -2.295f, 0.095096f, 0.108331f, 0.514612f, 0.203178f,
    -2.295f, 0.095096f, 0.108331f, 0.514612f, 0.203178f,
    -2.295f, 0.095096f, -0.108331f, 0.514612f, 0.296822f,
    -2.212f, 0.095096f, -0.3085f, 0.550447f, 0.383337f,
    -2.212f, 0.095096f, -0.3085f, 0.550447f, 0.383337f,
    -2.058f, 0.095096f, -0.461703f, 0.616663f, 0.449553f,
    -1.858f, 0.095096f, -0.544616f, 0.703178f, 0.485388f,
    -1.858f, 0.095096f, -0.544616f, 0.703178f, 0.485388f,
    -1.442f, 0.095096f, -0.461703f, 0.883337f, 0.449553f,
    -1.205f, 0.095096f, -0.108331f, 0.985388f, 0.296822f,
    -1.205f, 0.095096f, -0.108331f, 0.985388f, 0.296822f,
    -1.288f, 0.095096f, 0.3085f, 0.949553f, 0.116663f,
    -1.642f, 0.095096f, 0.544616f, 0.796822f, 0.014612f,
    -1.642f, 0.095096f, 0.544616f, 0.796822f, 0.014612f,
    -2.058f, 0.095096f, 0.461703f, 0.616663f, 0.050447f,
    -2.295f, 0.095096f, 0.108331f, 0.514612f, 0.203178f,
    -2.295f, 0.095096f, 0.108331f, 0.514612f, 0.203178f,
    -2.212f, 0.095096f, -0.3085f, 0.550447f, 0.383337f,
    -1.858f, 0.095096f, -0.544616f, 0.703178f, 0.485388f,
    -1.858f, 0.095096f, -0.544616f, 0.703178f, 0.485388f,
    -1.205f, 0.095096f, -0.108331f, 0.985388f, 0.296822f,
    -1.642f, 0.095096f, 0.544616f, 0.796822f, 0.014612f,
    -1.778f, 1.481391f, -0.068553f, 0.237727f, 0.279629f,
    -1.764f, 1.481391f, -0.072775f, 0.243743f, 0.281454f,
    -1.858f, 0.095096f, -0.544616f, 0.203178f, 0.485388f,
    -1.858f, 0.095096f, -0.544616f, 0.203178f, 0.485388f,
    -1.764f, 1.481391f, -0.072775f, 0.243743f, 0.281454f,
    -1.75f, 1.481391f, -0.074201f, 0.25f, 0.28207f,
    -1.824f, 1.481391f, -0.0f, 0.0f, 0.0f,
    -1.824f, 1.481391f, 0.000693f, 0.0f, 0.0f,
    -1.745f, 1.481391f, 0.073704f, 0.0f, 0.0f,
    -1.745f, 1.481391f, 0.073704f, 0.0f, 0.0f,
    -1.736f, 1.481391f, 0.072775f, 0.0f, 0.0f,
    -1.722f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.722f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.709f, 1.481391f, 0.061696f, 0.0f, 0.0f,
    -1.698f, 1.481391f, 0.052468f, 0.0f, 0.0f,
    -1.698f, 1.481391f, 0.052468f, 0.0f, 0.0f,
    -1.688f, 1.481391f, 0.041224f, 0.0f, 0.0f,
    -1.681f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.681f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.677f, 1.481391f, 0.014476f, 0.0f, 0.0f,
    -1.676f, 1.481391f, -0.0f, 0.0f, 0.0f,
    -1.676f, 1.481391f, -0.0f, 0.0f, 0.0f,
    -1.677f, 1.481391f, -0.014476f, 0.0f, 0.0f,
    -1.681f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.681f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.688f, 1.481391f, -0.041224f, 0.0f, 0.0f,
    -1.698f, 1.481391f, -0.052468f, 0.0f, 0.0f,
    -1.698f, 1.481391f, -0.052468f, 0.0f, 0.0f,
    -1.709f, 1.481391f, -0.061696f, 0.0f, 0.0f,
    -1.722f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.722f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.736f, 1.481391f, -0.072775f, 0.0f, 0.0f,
    -1.75f, 1.481391f, -0.074201f, 0.0f, 0.0f,
    -1.75f, 1.481391f, -0.074201f, 0.0f, 0.0f,
    -1.764f, 1.481391f, -0.072775f, 0.0f, 0.0f,
    -1.778f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.778f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.791f, 1.481391f, -0.061696f, 0.0f, 0.0f,
    -1.802f, 1.481391f, -0.052468f, 0.0f, 0.0f,
    -1.802f, 1.481391f, -0.052468f, 0.0f, 0.0f,
    -1.812f, 1.481391f, -0.041224f, 0.0f, 0.0f,
    -1.819f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.819f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.823f, 1.481391f, -0.014476f, 0.0f, 0.0f,
    -1.824f, 1.481391f, -0.0f, 0.0f, 0.0f,
    -1.824f, 1.481391f, -0.0f, 0.0f, 0.0f,
    -1.745f, 1.481391f, 0.073704f, 0.0f, 0.0f,
    -1.722f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.722f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.698f, 1.481391f, 0.052468f, 0.0f, 0.0f,
    -1.681f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.681f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.676f, 1.481391f, -0.0f, 0.0f, 0.0f,
    -1.681f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.681f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.698f, 1.481391f, -0.052468f, 0.0f, 0.0f,
    -1.722f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.722f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.75f, 1.481391f, -0.074201f, 0.0f, 0.0f,
    -1.778f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.778f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.802f, 1.481391f, -0.052468f, 0.0f, 0.0f,
    -1.819f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.819f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.824f, 1.481391f, -0.0f, 0.0f, 0.0f,
    -1.722f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.722f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.681f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.681f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.681f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.722f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.778f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.778f, 1.481391f, -0.068553f, 0.0f, 0.0f,
    -1.819f, 1.481391f, -0.028395f, 0.0f, 0.0f,
    -1.722f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.75f, 1.481391f, 0.074201f, 0.0f, 0.0f,
    -1.745f, 1.481391f, 0.073704f, 0.0f, 0.0f,
    -1.824f, 1.481391f, 0.000693f, 0.0f, 0.0f,
    -1.824f, 1.481391f, 0.000693f, 0.0f, 0.0f,
    -1.823f, 1.481391f, 0.014476f, 0.0f, 0.0f,
    -1.819f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.819f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.812f, 1.481391f, 0.041224f, 0.0f, 0.0f,
    -1.802f, 1.481391f, 0.052468f, 0.0f, 0.0f,
    -1.802f, 1.481391f, 0.052468f, 0.0f, 0.0f,
    -1.791f, 1.481391f, 0.061696f, 0.0f, 0.0f,
    -1.778f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.778f, 1.481391f, 0.068553f, 0.0f, 0.0f,
    -1.764f, 1.481391f, 0.072775f, 0.0f, 0.0f,
    -1.75f, 1.481391f, 0.074201f, 0.0f, 0.0f,
    -1.75f, 1.481391f, 0.074201f, 0.0f, 0.0f,
    -1.824f, 1.481391f, 0.000693f, 0.0f, 0.0f,
    -1.819f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.819f, 1.481391f, 0.028395f, 0.0f, 0.0f,
    -1.802f, 1.481391f, 0.052468f, 0.0f, 0.0f,
    -1.778f, 1.481391f, 0.068553f, 0.0f, 0.0f
};

float floorVertices[] = {
    -30.0f, -0.5f,  30.0f,  0.0f, 0.0f,
     30.0f, -0.5f,  30.0f,  1.0f, 0.0f,
     30.0f, -0.5f, -30.0f,  1.0f, 1.0f,
     30.0f, -0.5f, -30.0f,  1.0f, 1.0f,
    -30.0f, -0.5f, -30.0f,  0.0f, 1.0f,
    -30.0f, -0.5f,  30.0f,  0.0f, 0.0f
};

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow *window);

bool permitirMovimentacao = true;

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

glm::vec3 cameraPos = glm::vec3(-45.0f, 2.0f, 45.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

glm::vec3 carroPosicao(-3.0f, -1.5f, 3.0f); // Origem
float velocidadeCarro = 0.05f;
float carroRotacao = 90.0f;                 // Rotação inicial

bool isPointInsidePolygon(const glm::vec2& point, const std::vector<glm::vec2>& polygon) {
    int intersections = 0;
    size_t n = polygon.size();

    for (size_t i = 0; i < n; i++) {
        glm::vec2 v1 = polygon[i];
        glm::vec2 v2 = polygon[(i + 1) % n];

        // Verifica se o ponto está entre a borda vertical do segmento
        if ((point.y > v1.y) != (point.y > v2.y)) {
            float xIntersection = v1.x + (point.y - v1.y) * (v2.x - v1.x) / (v2.y - v1.y);
            if (point.x < xIntersection) {
                intersections++;
            }
        }
    }

    // Retorna true se o número de interseções for ímpar (dentro do polígono)
    return intersections % 2 == 1;
}

bool isCarInsideTrack(const glm::vec2& carPosition, 
                      const std::vector<glm::vec2>& innerTrack, 
                      const std::vector<glm::vec2>& outerTrack) {
    // O carro deve estar:
    // - Fora do polígono interno
    // - Dentro do polígono externo
    return isPointInsidePolygon(carPosition, outerTrack) &&
           !isPointInsidePolygon(carPosition, innerTrack);
}

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // Necessário pro MacOs, desabilitar pra executar no Windows
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "Coordenadas OpenGL : Cubo", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cerr << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

    // glew: load all OpenGL function pointers
    // ---------------------------------------
    // if(glewInit()!=GLEW_OK) {
    //     std::cout << "Ocorreu um erro iniciando GLEW!" << std::endl;
    // } else {
    //     std::cout << "GLEW OK!" << std::endl;
    //     std::cout << glGetString(GL_VERSION) << std::endl;
    // }

    // configure global opengl state
    // -----------------------------
    glEnable(GL_DEPTH_TEST);

    // build and compile our shader zprogram
    // ------------------------------------
    Shader ourShader("vertex.glsl", "fragment.glsl");
    unsigned int VAOcarro, VBOcarro;
    glGenVertexArrays(1, &VAOcarro);
    glGenBuffers(1, &VBOcarro);
    glBindVertexArray(VAOcarro);

    glBindBuffer(GL_ARRAY_BUFFER, VBOcarro);
    glBufferData(GL_ARRAY_BUFFER, sizeof(carroVertices), carroVertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // Desvincular para evitar erros
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    unsigned int squareVAO, squareVBO;
    glGenVertexArrays(1, &squareVAO);
    glGenBuffers(1, &squareVBO);

    glBindVertexArray(squareVAO);

    glBindBuffer(GL_ARRAY_BUFFER, squareVBO);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // Desvincular VAO
    glBindVertexArray(0);


    unsigned int placaVAO, placaVBO;
    // Gerar o VAO e o VBO
    glGenVertexArrays(1, &placaVAO);
    glGenBuffers(1, &placaVBO);

    // Vincular o VAO da placa
    glBindVertexArray(placaVAO);

    // Vincular o VBO e carregar os dados dos vértices
    glBindBuffer(GL_ARRAY_BUFFER, placaVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(placaVertices), placaVertices, GL_STATIC_DRAW);

    // Configurar o atributo de posição (layout location 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // Configurar o atributo de coordenadas de textura (layout location 1)
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // Desvincular o VAO e o VBO
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    unsigned int coneVAO, coneVBO;

    // Gerar o VAO e o VBO
    glGenVertexArrays(1, &coneVAO);
    glGenBuffers(1, &coneVBO);

    // Vincular o VAO da placa
    glBindVertexArray(coneVAO);

    // Vincular o VBO e carregar os dados dos vértices
    glBindBuffer(GL_ARRAY_BUFFER, coneVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(coneVertices), coneVertices, GL_STATIC_DRAW);

    // Configurar o atributo de posição (layout location 0)
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // Configurar o atributo de coordenadas de textura (layout location 1)
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // Desvincular o VAO e o VBO
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    // Configuração do VAO e VBO para o chão
    unsigned int floorVAO, floorVBO;
    glGenVertexArrays(1, &floorVAO);
    glGenBuffers(1, &floorVBO);

    glBindVertexArray(floorVAO);
    glBindBuffer(GL_ARRAY_BUFFER, floorVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(floorVertices), floorVertices, GL_STATIC_DRAW);

    // Atributos de posição
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    // Atributos de coordenadas de textura
    glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    glBindVertexArray(0);


    // load and create a texture
    // -------------------------
    unsigned int texture1, texture2, texture3;
    // texture 1
    // ---------
    glGenTextures(1, &texture1);
    glBindTexture(GL_TEXTURE_2D, texture1);
    // set the texture wrapping parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // set texture filtering parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    // load image, create texture and generate mipmaps
    int width, height, nrChannels;
    stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.
    unsigned char *data = stbi_load("res/images/sla.jpg", &width, &height, &nrChannels, 0);
    if (data)
    {
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
        glGenerateMipmap(GL_TEXTURE_2D);
    }
    else
    {
        std::cout << "Failed to load texture" << std::endl;
    }
    stbi_image_free(data);
    // texture 2
    // ---------
    glGenTextures(1, &texture2);
    glBindTexture(GL_TEXTURE_2D, texture2);
    // set the texture wrapping parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    // set texture filtering parameters
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    //load image, create texture and generate mipmaps
    data = stbi_load("res/images/Chao.png", &width, &height, &nrChannels, 0);
    if (data)
    {
        // note that the awesomeface.png has transparency and thus an alpha channel, so make sure to tell OpenGL the data type is of GL_RGBA
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
        glGenerateMipmap(GL_TEXTURE_2D);
    }
    else
    {
        std::cout << "Failed to load texture" << std::endl;
    }
    stbi_image_free(data);

    // tell opengl for each sampler to which texture unit it belongs to (only has to be done once)
    // -------------------------------------------------------------------------------------------
    ourShader.use();
    ourShader.setInt("texture1", 0);
    ourShader.setInt("texture2", 1);


    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------
        //glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // also clear the depth buffer now!

        // bind textures on corresponding texture units
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture1);
        glActiveTexture(GL_TEXTURE1);
        // glBindTexture(GL_TEXTURE_2D, texture2);

        // activate shader
        ourShader.use();

        // Ângulo de yaw (em graus)
        float yawAngle = -45.0f; 

        // Converta o yaw para radianos
        float yawRadians = glm::radians(yawAngle);

        // Calcule o novo vetor "cameraFront" com base no yaw
        cameraFront.x = cos(yawRadians); // Componente X
        cameraFront.z = sin(yawRadians); // Componente Z
        cameraFront = glm::normalize(cameraFront); // Normalize o vetor

        // Matrizes de transformação
        glm::mat4 model = glm::mat4(1.0f); // Inicialize a matriz modelo como identidade
        model = glm::translate(model, carroPosicao); // Translada para nova posição
        model = glm::scale(model, glm::vec3(0.15f, 0.15f, 0.15f));
        model = glm::rotate(model, glm::radians(carroRotacao), glm::vec3(0.0f, 1.0f, 0.0f)); // Rotação inicial do carro 

        std::cout << "Posição: " << carroPosicao.x << " | " << carroPosicao.z;
        std::cout << "\nRotação: " << carroRotacao << " graus" << std::endl << "\n";

        glm::vec2 carPosition = glm::vec2(carroPosicao.x, carroPosicao.z);

        if (!isCarInsideTrack(carPosition, innerTrack, outerTrack)) {
            std::cout << "Carro fora da pista!" << std::endl;
            // Corrija a posição ou impeça o movimento
            // carroPosicao.x -= direction.x * velocidadeCarro; // Exemplo de correção
            // carroPosicao.z -= direction.y * velocidadeCarro;
        }

        glm::mat4 view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp); // Atualize a matriz de visão
        view = glm::rotate(view, glm::radians(15.0f), glm::vec3(1.0f, 0.0f, 1.0f)); // Rotação em torno do eixo X
        glm::mat4 projection = glm::mat4(1.0f); // Inicialize a matriz de projeção
        projection = glm::perspective(glm::radians(45.0f), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);

        // retrieve the matrix uniform locations
        unsigned int modelLoc = glGetUniformLocation(ourShader.ID, "model");
        unsigned int viewLoc  = glGetUniformLocation(ourShader.ID, "view");
        // pass them to the shaders (3 different ways)
        glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
        glUniformMatrix4fv(viewLoc, 1, GL_FALSE, &view[0][0]);
        // note: currently we set the projection matrix each frame, but since the projection matrix rarely changes it's often best practice to set it outside the main loop only once.
        ourShader.setMat4("projection", projection);

        // Renderizar o carro
        glBindVertexArray(VAOcarro);
        glDrawArrays(GL_TRIANGLES, 0, 1000);
        glBindVertexArray(0); // Desvincular o VAO

        // Renderizar a placa
        glBindVertexArray(placaVAO); // Certifique-se de ter configurado o VAO da placa

        // Crie a matriz de transformação para a placa
        glm::mat4 modelPlaca = glm::mat4(1.0f); // Matriz identidade
        modelPlaca = glm::translate(modelPlaca, glm::vec3(-2.0f, -1.5f, 4.0f)); // Posiciona a placa
        modelPlaca = glm::scale(modelPlaca, glm::vec3(0.30f, 0.30f, 0.30f)); // Ajuste o tamanho se necessário
        modelPlaca = glm::rotate(modelPlaca, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f)); // Sem rotação para este exemplo
        ourShader.setMat4("model", modelPlaca);
        glDrawArrays(GL_TRIANGLES, 0, 1000); // Use o número de vértices da placa (6 para dois triângulos de um retângulo)
        glBindVertexArray(0); // Desvincula o VAO

        // Renderizar o chão
        glBindVertexArray(floorVAO);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, texture2); // Use a mesma textura do cubo
        glm::mat4 modelFloor = glm::mat4(1.0f);
        modelFloor = glm::translate(modelFloor, glm::vec3(0.0f, -1.0f, 0.0f));  // Desloca o chão para baixo
        // modelFloor = glm::scale(modelFloor, glm::vec3(2.0f, 1.0f, 2.0f));
        ourShader.setMat4("model", modelFloor);
        glBindVertexArray(floorVAO);
        glDrawArrays(GL_TRIANGLES, 0, 6);

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glDeleteVertexArrays(1, &VAOcarro);
    glDeleteBuffers(1, &VBOcarro);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow *window)
{
    // Rotação do carro
    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS) {
        carroRotacao += 2.0f; // Rotaciona para a esquerda
    }
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS) {
        carroRotacao -= 2.0f; // Rotaciona para a direita
    }

    // Converte o ângulo para radianos
    float anguloRad = glm::radians(carroRotacao);

    // Direção do movimento baseado na rotação
    glm::vec3 direcaoFrente = glm::vec3( sin(anguloRad), 0.0f,cos(anguloRad));

    // Movimentação para frente ou para trás
    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS) {
        carroPosicao += velocidadeCarro * direcaoFrente;
    }
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) {
        carroPosicao -= velocidadeCarro * direcaoFrente;
    }

    // Normaliza a rotação para mantê-la dentro do intervalo [0, 360)
    if (carroRotacao >= 360.0f) carroRotacao -= 360.0f;
    if (carroRotacao < 0.0f) carroRotacao += 360.0f;

    if (!permitirMovimentacao) return; // Ignorar teclas

    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);

    const float cameraSpeed = 0.05f;
    // ajustar de acordo com a velocidade do computador
    if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS)
    cameraPos += cameraSpeed * cameraFront;
    if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS)
    cameraPos -= cameraSpeed * cameraFront;
    if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS)
    cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS)
    cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}